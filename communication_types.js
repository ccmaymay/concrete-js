//
// Autogenerated by Thrift Compiler (0.18.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');

const uuid_ttypes = require('./uuid_types');
const language_ttypes = require('./language_types');
const structure_ttypes = require('./structure_types');
const entities_ttypes = require('./entities_types');
const situations_ttypes = require('./situations_types');
const audio_ttypes = require('./audio_types');
const metadata_ttypes = require('./metadata_types');
const cluster_ttypes = require('./cluster_types');


const ttypes = module.exports = {};
const CommunicationTagging = module.exports.CommunicationTagging = class {
  constructor(args) {
    this.uuid = null;
    this.metadata = null;
    this.taggingType = null;
    this.tagList = null;
    this.confidenceList = null;
    if (args) {
      if (args.uuid !== undefined && args.uuid !== null) {
        this.uuid = new uuid_ttypes.UUID(args.uuid);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
      }
      if (args.metadata !== undefined && args.metadata !== null) {
        this.metadata = new metadata_ttypes.AnnotationMetadata(args.metadata);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metadata is unset!');
      }
      if (args.taggingType !== undefined && args.taggingType !== null) {
        this.taggingType = args.taggingType;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field taggingType is unset!');
      }
      if (args.tagList !== undefined && args.tagList !== null) {
        this.tagList = Thrift.copyList(args.tagList, [null]);
      }
      if (args.confidenceList !== undefined && args.confidenceList !== null) {
        this.confidenceList = Thrift.copyList(args.confidenceList, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.uuid = new uuid_ttypes.UUID();
          this.uuid.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.metadata = new metadata_ttypes.AnnotationMetadata();
          this.metadata.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.taggingType = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.tagList = [];
          const _rtmp31 = input.readListBegin();
          const _size0 = _rtmp31.size || 0;
          for (let _i2 = 0; _i2 < _size0; ++_i2) {
            let elem3 = null;
            elem3 = input.readString();
            this.tagList.push(elem3);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.LIST) {
          this.confidenceList = [];
          const _rtmp35 = input.readListBegin();
          const _size4 = _rtmp35.size || 0;
          for (let _i6 = 0; _i6 < _size4; ++_i6) {
            let elem7 = null;
            elem7 = input.readDouble();
            this.confidenceList.push(elem7);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CommunicationTagging');
    if (this.uuid !== null && this.uuid !== undefined) {
      output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 1);
      this.uuid.write(output);
      output.writeFieldEnd();
    }
    if (this.metadata !== null && this.metadata !== undefined) {
      output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
      this.metadata.write(output);
      output.writeFieldEnd();
    }
    if (this.taggingType !== null && this.taggingType !== undefined) {
      output.writeFieldBegin('taggingType', Thrift.Type.STRING, 3);
      output.writeString(this.taggingType);
      output.writeFieldEnd();
    }
    if (this.tagList !== null && this.tagList !== undefined) {
      output.writeFieldBegin('tagList', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRING, this.tagList.length);
      for (let iter8 in this.tagList) {
        if (this.tagList.hasOwnProperty(iter8)) {
          iter8 = this.tagList[iter8];
          output.writeString(iter8);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.confidenceList !== null && this.confidenceList !== undefined) {
      output.writeFieldBegin('confidenceList', Thrift.Type.LIST, 5);
      output.writeListBegin(Thrift.Type.DOUBLE, this.confidenceList.length);
      for (let iter9 in this.confidenceList) {
        if (this.confidenceList.hasOwnProperty(iter9)) {
          iter9 = this.confidenceList[iter9];
          output.writeDouble(iter9);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Communication = module.exports.Communication = class {
  constructor(args) {
    this.id = null;
    this.uuid = null;
    this.type = null;
    this.text = null;
    this.startTime = null;
    this.endTime = null;
    this.communicationTaggingList = null;
    this.metadata = null;
    this.keyValueMap = null;
    this.lidList = null;
    this.sectionList = null;
    this.entityMentionSetList = null;
    this.entitySetList = null;
    this.situationMentionSetList = null;
    this.situationSetList = null;
    this.originalText = null;
    this.sound = null;
    this.communicationMetadata = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
      }
      if (args.uuid !== undefined && args.uuid !== null) {
        this.uuid = new uuid_ttypes.UUID(args.uuid);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
      }
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
      }
      if (args.text !== undefined && args.text !== null) {
        this.text = args.text;
      }
      if (args.startTime !== undefined && args.startTime !== null) {
        this.startTime = args.startTime;
      }
      if (args.endTime !== undefined && args.endTime !== null) {
        this.endTime = args.endTime;
      }
      if (args.communicationTaggingList !== undefined && args.communicationTaggingList !== null) {
        this.communicationTaggingList = Thrift.copyList(args.communicationTaggingList, [ttypes.CommunicationTagging]);
      }
      if (args.metadata !== undefined && args.metadata !== null) {
        this.metadata = new metadata_ttypes.AnnotationMetadata(args.metadata);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metadata is unset!');
      }
      if (args.keyValueMap !== undefined && args.keyValueMap !== null) {
        this.keyValueMap = Thrift.copyMap(args.keyValueMap, [null]);
      }
      if (args.lidList !== undefined && args.lidList !== null) {
        this.lidList = Thrift.copyList(args.lidList, [language_ttypes.LanguageIdentification]);
      }
      if (args.sectionList !== undefined && args.sectionList !== null) {
        this.sectionList = Thrift.copyList(args.sectionList, [structure_ttypes.Section]);
      }
      if (args.entityMentionSetList !== undefined && args.entityMentionSetList !== null) {
        this.entityMentionSetList = Thrift.copyList(args.entityMentionSetList, [entities_ttypes.EntityMentionSet]);
      }
      if (args.entitySetList !== undefined && args.entitySetList !== null) {
        this.entitySetList = Thrift.copyList(args.entitySetList, [entities_ttypes.EntitySet]);
      }
      if (args.situationMentionSetList !== undefined && args.situationMentionSetList !== null) {
        this.situationMentionSetList = Thrift.copyList(args.situationMentionSetList, [situations_ttypes.SituationMentionSet]);
      }
      if (args.situationSetList !== undefined && args.situationSetList !== null) {
        this.situationSetList = Thrift.copyList(args.situationSetList, [situations_ttypes.SituationSet]);
      }
      if (args.originalText !== undefined && args.originalText !== null) {
        this.originalText = args.originalText;
      }
      if (args.sound !== undefined && args.sound !== null) {
        this.sound = new audio_ttypes.Sound(args.sound);
      }
      if (args.communicationMetadata !== undefined && args.communicationMetadata !== null) {
        this.communicationMetadata = new metadata_ttypes.CommunicationMetadata(args.communicationMetadata);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.uuid = new uuid_ttypes.UUID();
          this.uuid.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.type = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.text = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I64) {
          this.startTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I64) {
          this.endTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.LIST) {
          this.communicationTaggingList = [];
          const _rtmp311 = input.readListBegin();
          const _size10 = _rtmp311.size || 0;
          for (let _i12 = 0; _i12 < _size10; ++_i12) {
            let elem13 = null;
            elem13 = new ttypes.CommunicationTagging();
            elem13.read(input);
            this.communicationTaggingList.push(elem13);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRUCT) {
          this.metadata = new metadata_ttypes.AnnotationMetadata();
          this.metadata.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.MAP) {
          this.keyValueMap = {};
          const _rtmp315 = input.readMapBegin();
          const _size14 = _rtmp315.size || 0;
          for (let _i16 = 0; _i16 < _size14; ++_i16) {
            let key17 = null;
            let val18 = null;
            key17 = input.readString();
            val18 = input.readString();
            this.keyValueMap[key17] = val18;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.LIST) {
          this.lidList = [];
          const _rtmp320 = input.readListBegin();
          const _size19 = _rtmp320.size || 0;
          for (let _i21 = 0; _i21 < _size19; ++_i21) {
            let elem22 = null;
            elem22 = new language_ttypes.LanguageIdentification();
            elem22.read(input);
            this.lidList.push(elem22);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.LIST) {
          this.sectionList = [];
          const _rtmp324 = input.readListBegin();
          const _size23 = _rtmp324.size || 0;
          for (let _i25 = 0; _i25 < _size23; ++_i25) {
            let elem26 = null;
            elem26 = new structure_ttypes.Section();
            elem26.read(input);
            this.sectionList.push(elem26);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.LIST) {
          this.entityMentionSetList = [];
          const _rtmp328 = input.readListBegin();
          const _size27 = _rtmp328.size || 0;
          for (let _i29 = 0; _i29 < _size27; ++_i29) {
            let elem30 = null;
            elem30 = new entities_ttypes.EntityMentionSet();
            elem30.read(input);
            this.entityMentionSetList.push(elem30);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.LIST) {
          this.entitySetList = [];
          const _rtmp332 = input.readListBegin();
          const _size31 = _rtmp332.size || 0;
          for (let _i33 = 0; _i33 < _size31; ++_i33) {
            let elem34 = null;
            elem34 = new entities_ttypes.EntitySet();
            elem34.read(input);
            this.entitySetList.push(elem34);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.LIST) {
          this.situationMentionSetList = [];
          const _rtmp336 = input.readListBegin();
          const _size35 = _rtmp336.size || 0;
          for (let _i37 = 0; _i37 < _size35; ++_i37) {
            let elem38 = null;
            elem38 = new situations_ttypes.SituationMentionSet();
            elem38.read(input);
            this.situationMentionSetList.push(elem38);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.LIST) {
          this.situationSetList = [];
          const _rtmp340 = input.readListBegin();
          const _size39 = _rtmp340.size || 0;
          for (let _i41 = 0; _i41 < _size39; ++_i41) {
            let elem42 = null;
            elem42 = new situations_ttypes.SituationSet();
            elem42.read(input);
            this.situationSetList.push(elem42);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 16:
        if (ftype == Thrift.Type.STRING) {
          this.originalText = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 20:
        if (ftype == Thrift.Type.STRUCT) {
          this.sound = new audio_ttypes.Sound();
          this.sound.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 21:
        if (ftype == Thrift.Type.STRUCT) {
          this.communicationMetadata = new metadata_ttypes.CommunicationMetadata();
          this.communicationMetadata.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Communication');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.uuid !== null && this.uuid !== undefined) {
      output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 2);
      this.uuid.write(output);
      output.writeFieldEnd();
    }
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.STRING, 3);
      output.writeString(this.type);
      output.writeFieldEnd();
    }
    if (this.text !== null && this.text !== undefined) {
      output.writeFieldBegin('text', Thrift.Type.STRING, 4);
      output.writeString(this.text);
      output.writeFieldEnd();
    }
    if (this.startTime !== null && this.startTime !== undefined) {
      output.writeFieldBegin('startTime', Thrift.Type.I64, 5);
      output.writeI64(this.startTime);
      output.writeFieldEnd();
    }
    if (this.endTime !== null && this.endTime !== undefined) {
      output.writeFieldBegin('endTime', Thrift.Type.I64, 6);
      output.writeI64(this.endTime);
      output.writeFieldEnd();
    }
    if (this.communicationTaggingList !== null && this.communicationTaggingList !== undefined) {
      output.writeFieldBegin('communicationTaggingList', Thrift.Type.LIST, 7);
      output.writeListBegin(Thrift.Type.STRUCT, this.communicationTaggingList.length);
      for (let iter43 in this.communicationTaggingList) {
        if (this.communicationTaggingList.hasOwnProperty(iter43)) {
          iter43 = this.communicationTaggingList[iter43];
          iter43.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.metadata !== null && this.metadata !== undefined) {
      output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 8);
      this.metadata.write(output);
      output.writeFieldEnd();
    }
    if (this.keyValueMap !== null && this.keyValueMap !== undefined) {
      output.writeFieldBegin('keyValueMap', Thrift.Type.MAP, 9);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.keyValueMap));
      for (let kiter44 in this.keyValueMap) {
        if (this.keyValueMap.hasOwnProperty(kiter44)) {
          let viter45 = this.keyValueMap[kiter44];
          output.writeString(kiter44);
          output.writeString(viter45);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.lidList !== null && this.lidList !== undefined) {
      output.writeFieldBegin('lidList', Thrift.Type.LIST, 10);
      output.writeListBegin(Thrift.Type.STRUCT, this.lidList.length);
      for (let iter46 in this.lidList) {
        if (this.lidList.hasOwnProperty(iter46)) {
          iter46 = this.lidList[iter46];
          iter46.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.sectionList !== null && this.sectionList !== undefined) {
      output.writeFieldBegin('sectionList', Thrift.Type.LIST, 11);
      output.writeListBegin(Thrift.Type.STRUCT, this.sectionList.length);
      for (let iter47 in this.sectionList) {
        if (this.sectionList.hasOwnProperty(iter47)) {
          iter47 = this.sectionList[iter47];
          iter47.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.entityMentionSetList !== null && this.entityMentionSetList !== undefined) {
      output.writeFieldBegin('entityMentionSetList', Thrift.Type.LIST, 12);
      output.writeListBegin(Thrift.Type.STRUCT, this.entityMentionSetList.length);
      for (let iter48 in this.entityMentionSetList) {
        if (this.entityMentionSetList.hasOwnProperty(iter48)) {
          iter48 = this.entityMentionSetList[iter48];
          iter48.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.entitySetList !== null && this.entitySetList !== undefined) {
      output.writeFieldBegin('entitySetList', Thrift.Type.LIST, 13);
      output.writeListBegin(Thrift.Type.STRUCT, this.entitySetList.length);
      for (let iter49 in this.entitySetList) {
        if (this.entitySetList.hasOwnProperty(iter49)) {
          iter49 = this.entitySetList[iter49];
          iter49.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.situationMentionSetList !== null && this.situationMentionSetList !== undefined) {
      output.writeFieldBegin('situationMentionSetList', Thrift.Type.LIST, 14);
      output.writeListBegin(Thrift.Type.STRUCT, this.situationMentionSetList.length);
      for (let iter50 in this.situationMentionSetList) {
        if (this.situationMentionSetList.hasOwnProperty(iter50)) {
          iter50 = this.situationMentionSetList[iter50];
          iter50.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.situationSetList !== null && this.situationSetList !== undefined) {
      output.writeFieldBegin('situationSetList', Thrift.Type.LIST, 15);
      output.writeListBegin(Thrift.Type.STRUCT, this.situationSetList.length);
      for (let iter51 in this.situationSetList) {
        if (this.situationSetList.hasOwnProperty(iter51)) {
          iter51 = this.situationSetList[iter51];
          iter51.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.originalText !== null && this.originalText !== undefined) {
      output.writeFieldBegin('originalText', Thrift.Type.STRING, 16);
      output.writeString(this.originalText);
      output.writeFieldEnd();
    }
    if (this.sound !== null && this.sound !== undefined) {
      output.writeFieldBegin('sound', Thrift.Type.STRUCT, 20);
      this.sound.write(output);
      output.writeFieldEnd();
    }
    if (this.communicationMetadata !== null && this.communicationMetadata !== undefined) {
      output.writeFieldBegin('communicationMetadata', Thrift.Type.STRUCT, 21);
      this.communicationMetadata.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CommunicationSet = module.exports.CommunicationSet = class {
  constructor(args) {
    this.communicationIdList = null;
    this.corpus = null;
    this.entityMentionClusterList = null;
    this.entityClusterList = null;
    this.situationMentionClusterList = null;
    this.situationClusterList = null;
    if (args) {
      if (args.communicationIdList !== undefined && args.communicationIdList !== null) {
        this.communicationIdList = Thrift.copyList(args.communicationIdList, [uuid_ttypes.UUID]);
      }
      if (args.corpus !== undefined && args.corpus !== null) {
        this.corpus = args.corpus;
      }
      if (args.entityMentionClusterList !== undefined && args.entityMentionClusterList !== null) {
        this.entityMentionClusterList = Thrift.copyList(args.entityMentionClusterList, [cluster_ttypes.Clustering]);
      }
      if (args.entityClusterList !== undefined && args.entityClusterList !== null) {
        this.entityClusterList = Thrift.copyList(args.entityClusterList, [cluster_ttypes.Clustering]);
      }
      if (args.situationMentionClusterList !== undefined && args.situationMentionClusterList !== null) {
        this.situationMentionClusterList = Thrift.copyList(args.situationMentionClusterList, [cluster_ttypes.Clustering]);
      }
      if (args.situationClusterList !== undefined && args.situationClusterList !== null) {
        this.situationClusterList = Thrift.copyList(args.situationClusterList, [cluster_ttypes.Clustering]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.communicationIdList = [];
          const _rtmp353 = input.readListBegin();
          const _size52 = _rtmp353.size || 0;
          for (let _i54 = 0; _i54 < _size52; ++_i54) {
            let elem55 = null;
            elem55 = new uuid_ttypes.UUID();
            elem55.read(input);
            this.communicationIdList.push(elem55);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.corpus = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.entityMentionClusterList = [];
          const _rtmp357 = input.readListBegin();
          const _size56 = _rtmp357.size || 0;
          for (let _i58 = 0; _i58 < _size56; ++_i58) {
            let elem59 = null;
            elem59 = new cluster_ttypes.Clustering();
            elem59.read(input);
            this.entityMentionClusterList.push(elem59);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.entityClusterList = [];
          const _rtmp361 = input.readListBegin();
          const _size60 = _rtmp361.size || 0;
          for (let _i62 = 0; _i62 < _size60; ++_i62) {
            let elem63 = null;
            elem63 = new cluster_ttypes.Clustering();
            elem63.read(input);
            this.entityClusterList.push(elem63);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.LIST) {
          this.situationMentionClusterList = [];
          const _rtmp365 = input.readListBegin();
          const _size64 = _rtmp365.size || 0;
          for (let _i66 = 0; _i66 < _size64; ++_i66) {
            let elem67 = null;
            elem67 = new cluster_ttypes.Clustering();
            elem67.read(input);
            this.situationMentionClusterList.push(elem67);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.LIST) {
          this.situationClusterList = [];
          const _rtmp369 = input.readListBegin();
          const _size68 = _rtmp369.size || 0;
          for (let _i70 = 0; _i70 < _size68; ++_i70) {
            let elem71 = null;
            elem71 = new cluster_ttypes.Clustering();
            elem71.read(input);
            this.situationClusterList.push(elem71);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CommunicationSet');
    if (this.communicationIdList !== null && this.communicationIdList !== undefined) {
      output.writeFieldBegin('communicationIdList', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.communicationIdList.length);
      for (let iter72 in this.communicationIdList) {
        if (this.communicationIdList.hasOwnProperty(iter72)) {
          iter72 = this.communicationIdList[iter72];
          iter72.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.corpus !== null && this.corpus !== undefined) {
      output.writeFieldBegin('corpus', Thrift.Type.STRING, 2);
      output.writeString(this.corpus);
      output.writeFieldEnd();
    }
    if (this.entityMentionClusterList !== null && this.entityMentionClusterList !== undefined) {
      output.writeFieldBegin('entityMentionClusterList', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.entityMentionClusterList.length);
      for (let iter73 in this.entityMentionClusterList) {
        if (this.entityMentionClusterList.hasOwnProperty(iter73)) {
          iter73 = this.entityMentionClusterList[iter73];
          iter73.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.entityClusterList !== null && this.entityClusterList !== undefined) {
      output.writeFieldBegin('entityClusterList', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRUCT, this.entityClusterList.length);
      for (let iter74 in this.entityClusterList) {
        if (this.entityClusterList.hasOwnProperty(iter74)) {
          iter74 = this.entityClusterList[iter74];
          iter74.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.situationMentionClusterList !== null && this.situationMentionClusterList !== undefined) {
      output.writeFieldBegin('situationMentionClusterList', Thrift.Type.LIST, 5);
      output.writeListBegin(Thrift.Type.STRUCT, this.situationMentionClusterList.length);
      for (let iter75 in this.situationMentionClusterList) {
        if (this.situationMentionClusterList.hasOwnProperty(iter75)) {
          iter75 = this.situationMentionClusterList[iter75];
          iter75.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.situationClusterList !== null && this.situationClusterList !== undefined) {
      output.writeFieldBegin('situationClusterList', Thrift.Type.LIST, 6);
      output.writeListBegin(Thrift.Type.STRUCT, this.situationClusterList.length);
      for (let iter76 in this.situationClusterList) {
        if (this.situationClusterList.hasOwnProperty(iter76)) {
          iter76 = this.situationClusterList[iter76];
          iter76.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
