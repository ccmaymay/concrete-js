//
// Autogenerated by Thrift Compiler (0.18.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');

const structure_ttypes = require('./structure_types');
const metadata_ttypes = require('./metadata_types');
const uuid_ttypes = require('./uuid_types');
const linking_ttypes = require('./linking_types');


const ttypes = module.exports = {};
const Property = module.exports.Property = class {
  constructor(args) {
    this.value = null;
    this.metadata = null;
    this.polarity = null;
    if (args) {
      if (args.value !== undefined && args.value !== null) {
        this.value = args.value;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field value is unset!');
      }
      if (args.metadata !== undefined && args.metadata !== null) {
        this.metadata = new metadata_ttypes.AnnotationMetadata(args.metadata);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metadata is unset!');
      }
      if (args.polarity !== undefined && args.polarity !== null) {
        this.polarity = args.polarity;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.value = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.metadata = new metadata_ttypes.AnnotationMetadata();
          this.metadata.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.DOUBLE) {
          this.polarity = input.readDouble();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Property');
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRING, 1);
      output.writeString(this.value);
      output.writeFieldEnd();
    }
    if (this.metadata !== null && this.metadata !== undefined) {
      output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
      this.metadata.write(output);
      output.writeFieldEnd();
    }
    if (this.polarity !== null && this.polarity !== undefined) {
      output.writeFieldBegin('polarity', Thrift.Type.DOUBLE, 3);
      output.writeDouble(this.polarity);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Argument = module.exports.Argument = class {
  constructor(args) {
    this.role = null;
    this.entityId = null;
    this.situationId = null;
    this.propertyList = null;
    if (args) {
      if (args.role !== undefined && args.role !== null) {
        this.role = args.role;
      }
      if (args.entityId !== undefined && args.entityId !== null) {
        this.entityId = new uuid_ttypes.UUID(args.entityId);
      }
      if (args.situationId !== undefined && args.situationId !== null) {
        this.situationId = new uuid_ttypes.UUID(args.situationId);
      }
      if (args.propertyList !== undefined && args.propertyList !== null) {
        this.propertyList = Thrift.copyList(args.propertyList, [ttypes.Property]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.role = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.entityId = new uuid_ttypes.UUID();
          this.entityId.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.situationId = new uuid_ttypes.UUID();
          this.situationId.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.propertyList = [];
          const _rtmp31 = input.readListBegin();
          const _size0 = _rtmp31.size || 0;
          for (let _i2 = 0; _i2 < _size0; ++_i2) {
            let elem3 = null;
            elem3 = new ttypes.Property();
            elem3.read(input);
            this.propertyList.push(elem3);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Argument');
    if (this.role !== null && this.role !== undefined) {
      output.writeFieldBegin('role', Thrift.Type.STRING, 1);
      output.writeString(this.role);
      output.writeFieldEnd();
    }
    if (this.entityId !== null && this.entityId !== undefined) {
      output.writeFieldBegin('entityId', Thrift.Type.STRUCT, 2);
      this.entityId.write(output);
      output.writeFieldEnd();
    }
    if (this.situationId !== null && this.situationId !== undefined) {
      output.writeFieldBegin('situationId', Thrift.Type.STRUCT, 3);
      this.situationId.write(output);
      output.writeFieldEnd();
    }
    if (this.propertyList !== null && this.propertyList !== undefined) {
      output.writeFieldBegin('propertyList', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRUCT, this.propertyList.length);
      for (let iter4 in this.propertyList) {
        if (this.propertyList.hasOwnProperty(iter4)) {
          iter4 = this.propertyList[iter4];
          iter4.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Justification = module.exports.Justification = class {
  constructor(args) {
    this.justificationType = null;
    this.mentionId = null;
    this.tokenRefSeqList = null;
    if (args) {
      if (args.justificationType !== undefined && args.justificationType !== null) {
        this.justificationType = args.justificationType;
      }
      if (args.mentionId !== undefined && args.mentionId !== null) {
        this.mentionId = new uuid_ttypes.UUID(args.mentionId);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field mentionId is unset!');
      }
      if (args.tokenRefSeqList !== undefined && args.tokenRefSeqList !== null) {
        this.tokenRefSeqList = Thrift.copyList(args.tokenRefSeqList, [structure_ttypes.TokenRefSequence]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.justificationType = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.mentionId = new uuid_ttypes.UUID();
          this.mentionId.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.tokenRefSeqList = [];
          const _rtmp36 = input.readListBegin();
          const _size5 = _rtmp36.size || 0;
          for (let _i7 = 0; _i7 < _size5; ++_i7) {
            let elem8 = null;
            elem8 = new structure_ttypes.TokenRefSequence();
            elem8.read(input);
            this.tokenRefSeqList.push(elem8);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Justification');
    if (this.justificationType !== null && this.justificationType !== undefined) {
      output.writeFieldBegin('justificationType', Thrift.Type.STRING, 1);
      output.writeString(this.justificationType);
      output.writeFieldEnd();
    }
    if (this.mentionId !== null && this.mentionId !== undefined) {
      output.writeFieldBegin('mentionId', Thrift.Type.STRUCT, 2);
      this.mentionId.write(output);
      output.writeFieldEnd();
    }
    if (this.tokenRefSeqList !== null && this.tokenRefSeqList !== undefined) {
      output.writeFieldBegin('tokenRefSeqList', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.tokenRefSeqList.length);
      for (let iter9 in this.tokenRefSeqList) {
        if (this.tokenRefSeqList.hasOwnProperty(iter9)) {
          iter9 = this.tokenRefSeqList[iter9];
          iter9.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TimeML = module.exports.TimeML = class {
  constructor(args) {
    this.timeMLClass = null;
    this.timeMLTense = null;
    this.timeMLAspect = null;
    if (args) {
      if (args.timeMLClass !== undefined && args.timeMLClass !== null) {
        this.timeMLClass = args.timeMLClass;
      }
      if (args.timeMLTense !== undefined && args.timeMLTense !== null) {
        this.timeMLTense = args.timeMLTense;
      }
      if (args.timeMLAspect !== undefined && args.timeMLAspect !== null) {
        this.timeMLAspect = args.timeMLAspect;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.timeMLClass = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timeMLTense = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timeMLAspect = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TimeML');
    if (this.timeMLClass !== null && this.timeMLClass !== undefined) {
      output.writeFieldBegin('timeMLClass', Thrift.Type.STRING, 1);
      output.writeString(this.timeMLClass);
      output.writeFieldEnd();
    }
    if (this.timeMLTense !== null && this.timeMLTense !== undefined) {
      output.writeFieldBegin('timeMLTense', Thrift.Type.STRING, 2);
      output.writeString(this.timeMLTense);
      output.writeFieldEnd();
    }
    if (this.timeMLAspect !== null && this.timeMLAspect !== undefined) {
      output.writeFieldBegin('timeMLAspect', Thrift.Type.STRING, 3);
      output.writeString(this.timeMLAspect);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Situation = module.exports.Situation = class {
  constructor(args) {
    this.uuid = null;
    this.id = null;
    this.situationType = null;
    this.situationKind = null;
    this.argumentList = null;
    this.mentionIdList = null;
    this.justificationList = null;
    this.timeML = null;
    this.intensity = null;
    this.polarity = null;
    this.confidence = null;
    if (args) {
      if (args.uuid !== undefined && args.uuid !== null) {
        this.uuid = new uuid_ttypes.UUID(args.uuid);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
      }
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.situationType !== undefined && args.situationType !== null) {
        this.situationType = args.situationType;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field situationType is unset!');
      }
      if (args.situationKind !== undefined && args.situationKind !== null) {
        this.situationKind = args.situationKind;
      }
      if (args.argumentList !== undefined && args.argumentList !== null) {
        this.argumentList = Thrift.copyList(args.argumentList, [ttypes.Argument]);
      }
      if (args.mentionIdList !== undefined && args.mentionIdList !== null) {
        this.mentionIdList = Thrift.copyList(args.mentionIdList, [uuid_ttypes.UUID]);
      }
      if (args.justificationList !== undefined && args.justificationList !== null) {
        this.justificationList = Thrift.copyList(args.justificationList, [ttypes.Justification]);
      }
      if (args.timeML !== undefined && args.timeML !== null) {
        this.timeML = new ttypes.TimeML(args.timeML);
      }
      if (args.intensity !== undefined && args.intensity !== null) {
        this.intensity = args.intensity;
      }
      if (args.polarity !== undefined && args.polarity !== null) {
        this.polarity = args.polarity;
      }
      if (args.confidence !== undefined && args.confidence !== null) {
        this.confidence = args.confidence;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.uuid = new uuid_ttypes.UUID();
          this.uuid.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.situationType = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 50:
        if (ftype == Thrift.Type.STRING) {
          this.situationKind = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.argumentList = [];
          const _rtmp311 = input.readListBegin();
          const _size10 = _rtmp311.size || 0;
          for (let _i12 = 0; _i12 < _size10; ++_i12) {
            let elem13 = null;
            elem13 = new ttypes.Argument();
            elem13.read(input);
            this.argumentList.push(elem13);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.mentionIdList = [];
          const _rtmp315 = input.readListBegin();
          const _size14 = _rtmp315.size || 0;
          for (let _i16 = 0; _i16 < _size14; ++_i16) {
            let elem17 = null;
            elem17 = new uuid_ttypes.UUID();
            elem17.read(input);
            this.mentionIdList.push(elem17);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.LIST) {
          this.justificationList = [];
          const _rtmp319 = input.readListBegin();
          const _size18 = _rtmp319.size || 0;
          for (let _i20 = 0; _i20 < _size18; ++_i20) {
            let elem21 = null;
            elem21 = new ttypes.Justification();
            elem21.read(input);
            this.justificationList.push(elem21);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 54:
        if (ftype == Thrift.Type.STRUCT) {
          this.timeML = new ttypes.TimeML();
          this.timeML.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 100:
        if (ftype == Thrift.Type.DOUBLE) {
          this.intensity = input.readDouble();
        } else {
          input.skip(ftype);
        }
        break;
        case 101:
        if (ftype == Thrift.Type.STRING) {
          this.polarity = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 200:
        if (ftype == Thrift.Type.DOUBLE) {
          this.confidence = input.readDouble();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Situation');
    if (this.uuid !== null && this.uuid !== undefined) {
      output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 1);
      this.uuid.write(output);
      output.writeFieldEnd();
    }
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 6);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.situationType !== null && this.situationType !== undefined) {
      output.writeFieldBegin('situationType', Thrift.Type.STRING, 2);
      output.writeString(this.situationType);
      output.writeFieldEnd();
    }
    if (this.situationKind !== null && this.situationKind !== undefined) {
      output.writeFieldBegin('situationKind', Thrift.Type.STRING, 50);
      output.writeString(this.situationKind);
      output.writeFieldEnd();
    }
    if (this.argumentList !== null && this.argumentList !== undefined) {
      output.writeFieldBegin('argumentList', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.argumentList.length);
      for (let iter22 in this.argumentList) {
        if (this.argumentList.hasOwnProperty(iter22)) {
          iter22 = this.argumentList[iter22];
          iter22.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.mentionIdList !== null && this.mentionIdList !== undefined) {
      output.writeFieldBegin('mentionIdList', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRUCT, this.mentionIdList.length);
      for (let iter23 in this.mentionIdList) {
        if (this.mentionIdList.hasOwnProperty(iter23)) {
          iter23 = this.mentionIdList[iter23];
          iter23.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.justificationList !== null && this.justificationList !== undefined) {
      output.writeFieldBegin('justificationList', Thrift.Type.LIST, 5);
      output.writeListBegin(Thrift.Type.STRUCT, this.justificationList.length);
      for (let iter24 in this.justificationList) {
        if (this.justificationList.hasOwnProperty(iter24)) {
          iter24 = this.justificationList[iter24];
          iter24.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timeML !== null && this.timeML !== undefined) {
      output.writeFieldBegin('timeML', Thrift.Type.STRUCT, 54);
      this.timeML.write(output);
      output.writeFieldEnd();
    }
    if (this.intensity !== null && this.intensity !== undefined) {
      output.writeFieldBegin('intensity', Thrift.Type.DOUBLE, 100);
      output.writeDouble(this.intensity);
      output.writeFieldEnd();
    }
    if (this.polarity !== null && this.polarity !== undefined) {
      output.writeFieldBegin('polarity', Thrift.Type.STRING, 101);
      output.writeString(this.polarity);
      output.writeFieldEnd();
    }
    if (this.confidence !== null && this.confidence !== undefined) {
      output.writeFieldBegin('confidence', Thrift.Type.DOUBLE, 200);
      output.writeDouble(this.confidence);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SituationSet = module.exports.SituationSet = class {
  constructor(args) {
    this.uuid = null;
    this.metadata = null;
    this.situationList = null;
    this.linkingList = null;
    if (args) {
      if (args.uuid !== undefined && args.uuid !== null) {
        this.uuid = new uuid_ttypes.UUID(args.uuid);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
      }
      if (args.metadata !== undefined && args.metadata !== null) {
        this.metadata = new metadata_ttypes.AnnotationMetadata(args.metadata);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metadata is unset!');
      }
      if (args.situationList !== undefined && args.situationList !== null) {
        this.situationList = Thrift.copyList(args.situationList, [ttypes.Situation]);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field situationList is unset!');
      }
      if (args.linkingList !== undefined && args.linkingList !== null) {
        this.linkingList = Thrift.copyList(args.linkingList, [linking_ttypes.Linking]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.uuid = new uuid_ttypes.UUID();
          this.uuid.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.metadata = new metadata_ttypes.AnnotationMetadata();
          this.metadata.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.situationList = [];
          const _rtmp326 = input.readListBegin();
          const _size25 = _rtmp326.size || 0;
          for (let _i27 = 0; _i27 < _size25; ++_i27) {
            let elem28 = null;
            elem28 = new ttypes.Situation();
            elem28.read(input);
            this.situationList.push(elem28);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.linkingList = [];
          const _rtmp330 = input.readListBegin();
          const _size29 = _rtmp330.size || 0;
          for (let _i31 = 0; _i31 < _size29; ++_i31) {
            let elem32 = null;
            elem32 = new linking_ttypes.Linking();
            elem32.read(input);
            this.linkingList.push(elem32);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SituationSet');
    if (this.uuid !== null && this.uuid !== undefined) {
      output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 1);
      this.uuid.write(output);
      output.writeFieldEnd();
    }
    if (this.metadata !== null && this.metadata !== undefined) {
      output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
      this.metadata.write(output);
      output.writeFieldEnd();
    }
    if (this.situationList !== null && this.situationList !== undefined) {
      output.writeFieldBegin('situationList', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.situationList.length);
      for (let iter33 in this.situationList) {
        if (this.situationList.hasOwnProperty(iter33)) {
          iter33 = this.situationList[iter33];
          iter33.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.linkingList !== null && this.linkingList !== undefined) {
      output.writeFieldBegin('linkingList', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRUCT, this.linkingList.length);
      for (let iter34 in this.linkingList) {
        if (this.linkingList.hasOwnProperty(iter34)) {
          iter34 = this.linkingList[iter34];
          iter34.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const MentionArgument = module.exports.MentionArgument = class {
  constructor(args) {
    this.role = null;
    this.entityMentionId = null;
    this.situationMentionId = null;
    this.tokens = null;
    this.confidence = null;
    this.propertyList = null;
    if (args) {
      if (args.role !== undefined && args.role !== null) {
        this.role = args.role;
      }
      if (args.entityMentionId !== undefined && args.entityMentionId !== null) {
        this.entityMentionId = new uuid_ttypes.UUID(args.entityMentionId);
      }
      if (args.situationMentionId !== undefined && args.situationMentionId !== null) {
        this.situationMentionId = new uuid_ttypes.UUID(args.situationMentionId);
      }
      if (args.tokens !== undefined && args.tokens !== null) {
        this.tokens = new structure_ttypes.TokenRefSequence(args.tokens);
      }
      if (args.confidence !== undefined && args.confidence !== null) {
        this.confidence = args.confidence;
      }
      if (args.propertyList !== undefined && args.propertyList !== null) {
        this.propertyList = Thrift.copyList(args.propertyList, [ttypes.Property]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.role = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.entityMentionId = new uuid_ttypes.UUID();
          this.entityMentionId.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.situationMentionId = new uuid_ttypes.UUID();
          this.situationMentionId.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.tokens = new structure_ttypes.TokenRefSequence();
          this.tokens.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.DOUBLE) {
          this.confidence = input.readDouble();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.LIST) {
          this.propertyList = [];
          const _rtmp336 = input.readListBegin();
          const _size35 = _rtmp336.size || 0;
          for (let _i37 = 0; _i37 < _size35; ++_i37) {
            let elem38 = null;
            elem38 = new ttypes.Property();
            elem38.read(input);
            this.propertyList.push(elem38);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MentionArgument');
    if (this.role !== null && this.role !== undefined) {
      output.writeFieldBegin('role', Thrift.Type.STRING, 1);
      output.writeString(this.role);
      output.writeFieldEnd();
    }
    if (this.entityMentionId !== null && this.entityMentionId !== undefined) {
      output.writeFieldBegin('entityMentionId', Thrift.Type.STRUCT, 2);
      this.entityMentionId.write(output);
      output.writeFieldEnd();
    }
    if (this.situationMentionId !== null && this.situationMentionId !== undefined) {
      output.writeFieldBegin('situationMentionId', Thrift.Type.STRUCT, 3);
      this.situationMentionId.write(output);
      output.writeFieldEnd();
    }
    if (this.tokens !== null && this.tokens !== undefined) {
      output.writeFieldBegin('tokens', Thrift.Type.STRUCT, 4);
      this.tokens.write(output);
      output.writeFieldEnd();
    }
    if (this.confidence !== null && this.confidence !== undefined) {
      output.writeFieldBegin('confidence', Thrift.Type.DOUBLE, 5);
      output.writeDouble(this.confidence);
      output.writeFieldEnd();
    }
    if (this.propertyList !== null && this.propertyList !== undefined) {
      output.writeFieldBegin('propertyList', Thrift.Type.LIST, 6);
      output.writeListBegin(Thrift.Type.STRUCT, this.propertyList.length);
      for (let iter39 in this.propertyList) {
        if (this.propertyList.hasOwnProperty(iter39)) {
          iter39 = this.propertyList[iter39];
          iter39.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SituationMention = module.exports.SituationMention = class {
  constructor(args) {
    this.uuid = null;
    this.id = null;
    this.text = null;
    this.situationType = null;
    this.situationKind = null;
    this.argumentList = null;
    this.intensity = null;
    this.polarity = null;
    this.tokens = null;
    this.confidence = null;
    if (args) {
      if (args.uuid !== undefined && args.uuid !== null) {
        this.uuid = new uuid_ttypes.UUID(args.uuid);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
      }
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.text !== undefined && args.text !== null) {
        this.text = args.text;
      }
      if (args.situationType !== undefined && args.situationType !== null) {
        this.situationType = args.situationType;
      }
      if (args.situationKind !== undefined && args.situationKind !== null) {
        this.situationKind = args.situationKind;
      }
      if (args.argumentList !== undefined && args.argumentList !== null) {
        this.argumentList = Thrift.copyList(args.argumentList, [ttypes.MentionArgument]);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field argumentList is unset!');
      }
      if (args.intensity !== undefined && args.intensity !== null) {
        this.intensity = args.intensity;
      }
      if (args.polarity !== undefined && args.polarity !== null) {
        this.polarity = args.polarity;
      }
      if (args.tokens !== undefined && args.tokens !== null) {
        this.tokens = new structure_ttypes.TokenRefSequence(args.tokens);
      }
      if (args.confidence !== undefined && args.confidence !== null) {
        this.confidence = args.confidence;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.uuid = new uuid_ttypes.UUID();
          this.uuid.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.text = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.situationType = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 50:
        if (ftype == Thrift.Type.STRING) {
          this.situationKind = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.argumentList = [];
          const _rtmp341 = input.readListBegin();
          const _size40 = _rtmp341.size || 0;
          for (let _i42 = 0; _i42 < _size40; ++_i42) {
            let elem43 = null;
            elem43 = new ttypes.MentionArgument();
            elem43.read(input);
            this.argumentList.push(elem43);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 100:
        if (ftype == Thrift.Type.DOUBLE) {
          this.intensity = input.readDouble();
        } else {
          input.skip(ftype);
        }
        break;
        case 101:
        if (ftype == Thrift.Type.STRING) {
          this.polarity = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 150:
        if (ftype == Thrift.Type.STRUCT) {
          this.tokens = new structure_ttypes.TokenRefSequence();
          this.tokens.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 200:
        if (ftype == Thrift.Type.DOUBLE) {
          this.confidence = input.readDouble();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SituationMention');
    if (this.uuid !== null && this.uuid !== undefined) {
      output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 1);
      this.uuid.write(output);
      output.writeFieldEnd();
    }
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 5);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.text !== null && this.text !== undefined) {
      output.writeFieldBegin('text', Thrift.Type.STRING, 2);
      output.writeString(this.text);
      output.writeFieldEnd();
    }
    if (this.situationType !== null && this.situationType !== undefined) {
      output.writeFieldBegin('situationType', Thrift.Type.STRING, 3);
      output.writeString(this.situationType);
      output.writeFieldEnd();
    }
    if (this.situationKind !== null && this.situationKind !== undefined) {
      output.writeFieldBegin('situationKind', Thrift.Type.STRING, 50);
      output.writeString(this.situationKind);
      output.writeFieldEnd();
    }
    if (this.argumentList !== null && this.argumentList !== undefined) {
      output.writeFieldBegin('argumentList', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRUCT, this.argumentList.length);
      for (let iter44 in this.argumentList) {
        if (this.argumentList.hasOwnProperty(iter44)) {
          iter44 = this.argumentList[iter44];
          iter44.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.intensity !== null && this.intensity !== undefined) {
      output.writeFieldBegin('intensity', Thrift.Type.DOUBLE, 100);
      output.writeDouble(this.intensity);
      output.writeFieldEnd();
    }
    if (this.polarity !== null && this.polarity !== undefined) {
      output.writeFieldBegin('polarity', Thrift.Type.STRING, 101);
      output.writeString(this.polarity);
      output.writeFieldEnd();
    }
    if (this.tokens !== null && this.tokens !== undefined) {
      output.writeFieldBegin('tokens', Thrift.Type.STRUCT, 150);
      this.tokens.write(output);
      output.writeFieldEnd();
    }
    if (this.confidence !== null && this.confidence !== undefined) {
      output.writeFieldBegin('confidence', Thrift.Type.DOUBLE, 200);
      output.writeDouble(this.confidence);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SituationMentionSet = module.exports.SituationMentionSet = class {
  constructor(args) {
    this.uuid = null;
    this.metadata = null;
    this.mentionList = null;
    this.linkingList = null;
    if (args) {
      if (args.uuid !== undefined && args.uuid !== null) {
        this.uuid = new uuid_ttypes.UUID(args.uuid);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
      }
      if (args.metadata !== undefined && args.metadata !== null) {
        this.metadata = new metadata_ttypes.AnnotationMetadata(args.metadata);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metadata is unset!');
      }
      if (args.mentionList !== undefined && args.mentionList !== null) {
        this.mentionList = Thrift.copyList(args.mentionList, [ttypes.SituationMention]);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field mentionList is unset!');
      }
      if (args.linkingList !== undefined && args.linkingList !== null) {
        this.linkingList = Thrift.copyList(args.linkingList, [linking_ttypes.Linking]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.uuid = new uuid_ttypes.UUID();
          this.uuid.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.metadata = new metadata_ttypes.AnnotationMetadata();
          this.metadata.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.mentionList = [];
          const _rtmp346 = input.readListBegin();
          const _size45 = _rtmp346.size || 0;
          for (let _i47 = 0; _i47 < _size45; ++_i47) {
            let elem48 = null;
            elem48 = new ttypes.SituationMention();
            elem48.read(input);
            this.mentionList.push(elem48);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.linkingList = [];
          const _rtmp350 = input.readListBegin();
          const _size49 = _rtmp350.size || 0;
          for (let _i51 = 0; _i51 < _size49; ++_i51) {
            let elem52 = null;
            elem52 = new linking_ttypes.Linking();
            elem52.read(input);
            this.linkingList.push(elem52);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SituationMentionSet');
    if (this.uuid !== null && this.uuid !== undefined) {
      output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 1);
      this.uuid.write(output);
      output.writeFieldEnd();
    }
    if (this.metadata !== null && this.metadata !== undefined) {
      output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
      this.metadata.write(output);
      output.writeFieldEnd();
    }
    if (this.mentionList !== null && this.mentionList !== undefined) {
      output.writeFieldBegin('mentionList', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.mentionList.length);
      for (let iter53 in this.mentionList) {
        if (this.mentionList.hasOwnProperty(iter53)) {
          iter53 = this.mentionList[iter53];
          iter53.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.linkingList !== null && this.linkingList !== undefined) {
      output.writeFieldBegin('linkingList', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRUCT, this.linkingList.length);
      for (let iter54 in this.linkingList) {
        if (this.linkingList.hasOwnProperty(iter54)) {
          iter54 = this.linkingList[iter54];
          iter54.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
