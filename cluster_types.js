//
// Autogenerated by Thrift Compiler (0.18.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');

const uuid_ttypes = require('./uuid_types');
const metadata_ttypes = require('./metadata_types');


const ttypes = module.exports = {};
const ClusterMember = module.exports.ClusterMember = class {
  constructor(args) {
    this.communicationId = null;
    this.setId = null;
    this.elementId = null;
    if (args) {
      if (args.communicationId !== undefined && args.communicationId !== null) {
        this.communicationId = new uuid_ttypes.UUID(args.communicationId);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field communicationId is unset!');
      }
      if (args.setId !== undefined && args.setId !== null) {
        this.setId = new uuid_ttypes.UUID(args.setId);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field setId is unset!');
      }
      if (args.elementId !== undefined && args.elementId !== null) {
        this.elementId = new uuid_ttypes.UUID(args.elementId);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field elementId is unset!');
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.communicationId = new uuid_ttypes.UUID();
          this.communicationId.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.setId = new uuid_ttypes.UUID();
          this.setId.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.elementId = new uuid_ttypes.UUID();
          this.elementId.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ClusterMember');
    if (this.communicationId !== null && this.communicationId !== undefined) {
      output.writeFieldBegin('communicationId', Thrift.Type.STRUCT, 1);
      this.communicationId.write(output);
      output.writeFieldEnd();
    }
    if (this.setId !== null && this.setId !== undefined) {
      output.writeFieldBegin('setId', Thrift.Type.STRUCT, 2);
      this.setId.write(output);
      output.writeFieldEnd();
    }
    if (this.elementId !== null && this.elementId !== undefined) {
      output.writeFieldBegin('elementId', Thrift.Type.STRUCT, 3);
      this.elementId.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Cluster = module.exports.Cluster = class {
  constructor(args) {
    this.clusterMemberIndexList = null;
    this.confidenceList = null;
    this.childIndexList = null;
    if (args) {
      if (args.clusterMemberIndexList !== undefined && args.clusterMemberIndexList !== null) {
        this.clusterMemberIndexList = Thrift.copyList(args.clusterMemberIndexList, [null]);
      }
      if (args.confidenceList !== undefined && args.confidenceList !== null) {
        this.confidenceList = Thrift.copyList(args.confidenceList, [null]);
      }
      if (args.childIndexList !== undefined && args.childIndexList !== null) {
        this.childIndexList = Thrift.copyList(args.childIndexList, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.clusterMemberIndexList = [];
          const _rtmp31 = input.readListBegin();
          const _size0 = _rtmp31.size || 0;
          for (let _i2 = 0; _i2 < _size0; ++_i2) {
            let elem3 = null;
            elem3 = input.readI32();
            this.clusterMemberIndexList.push(elem3);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.confidenceList = [];
          const _rtmp35 = input.readListBegin();
          const _size4 = _rtmp35.size || 0;
          for (let _i6 = 0; _i6 < _size4; ++_i6) {
            let elem7 = null;
            elem7 = input.readDouble();
            this.confidenceList.push(elem7);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.childIndexList = [];
          const _rtmp39 = input.readListBegin();
          const _size8 = _rtmp39.size || 0;
          for (let _i10 = 0; _i10 < _size8; ++_i10) {
            let elem11 = null;
            elem11 = input.readI32();
            this.childIndexList.push(elem11);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Cluster');
    if (this.clusterMemberIndexList !== null && this.clusterMemberIndexList !== undefined) {
      output.writeFieldBegin('clusterMemberIndexList', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I32, this.clusterMemberIndexList.length);
      for (let iter12 in this.clusterMemberIndexList) {
        if (this.clusterMemberIndexList.hasOwnProperty(iter12)) {
          iter12 = this.clusterMemberIndexList[iter12];
          output.writeI32(iter12);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.confidenceList !== null && this.confidenceList !== undefined) {
      output.writeFieldBegin('confidenceList', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.DOUBLE, this.confidenceList.length);
      for (let iter13 in this.confidenceList) {
        if (this.confidenceList.hasOwnProperty(iter13)) {
          iter13 = this.confidenceList[iter13];
          output.writeDouble(iter13);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.childIndexList !== null && this.childIndexList !== undefined) {
      output.writeFieldBegin('childIndexList', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.I32, this.childIndexList.length);
      for (let iter14 in this.childIndexList) {
        if (this.childIndexList.hasOwnProperty(iter14)) {
          iter14 = this.childIndexList[iter14];
          output.writeI32(iter14);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Clustering = module.exports.Clustering = class {
  constructor(args) {
    this.uuid = null;
    this.metadata = null;
    this.clusterMemberList = null;
    this.clusterList = null;
    this.rootClusterIndexList = null;
    if (args) {
      if (args.uuid !== undefined && args.uuid !== null) {
        this.uuid = new uuid_ttypes.UUID(args.uuid);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
      }
      if (args.metadata !== undefined && args.metadata !== null) {
        this.metadata = new metadata_ttypes.AnnotationMetadata(args.metadata);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metadata is unset!');
      }
      if (args.clusterMemberList !== undefined && args.clusterMemberList !== null) {
        this.clusterMemberList = Thrift.copyList(args.clusterMemberList, [ttypes.ClusterMember]);
      }
      if (args.clusterList !== undefined && args.clusterList !== null) {
        this.clusterList = Thrift.copyList(args.clusterList, [ttypes.Cluster]);
      }
      if (args.rootClusterIndexList !== undefined && args.rootClusterIndexList !== null) {
        this.rootClusterIndexList = Thrift.copyList(args.rootClusterIndexList, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.uuid = new uuid_ttypes.UUID();
          this.uuid.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.metadata = new metadata_ttypes.AnnotationMetadata();
          this.metadata.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.clusterMemberList = [];
          const _rtmp316 = input.readListBegin();
          const _size15 = _rtmp316.size || 0;
          for (let _i17 = 0; _i17 < _size15; ++_i17) {
            let elem18 = null;
            elem18 = new ttypes.ClusterMember();
            elem18.read(input);
            this.clusterMemberList.push(elem18);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.clusterList = [];
          const _rtmp320 = input.readListBegin();
          const _size19 = _rtmp320.size || 0;
          for (let _i21 = 0; _i21 < _size19; ++_i21) {
            let elem22 = null;
            elem22 = new ttypes.Cluster();
            elem22.read(input);
            this.clusterList.push(elem22);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.LIST) {
          this.rootClusterIndexList = [];
          const _rtmp324 = input.readListBegin();
          const _size23 = _rtmp324.size || 0;
          for (let _i25 = 0; _i25 < _size23; ++_i25) {
            let elem26 = null;
            elem26 = input.readI32();
            this.rootClusterIndexList.push(elem26);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Clustering');
    if (this.uuid !== null && this.uuid !== undefined) {
      output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 1);
      this.uuid.write(output);
      output.writeFieldEnd();
    }
    if (this.metadata !== null && this.metadata !== undefined) {
      output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
      this.metadata.write(output);
      output.writeFieldEnd();
    }
    if (this.clusterMemberList !== null && this.clusterMemberList !== undefined) {
      output.writeFieldBegin('clusterMemberList', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.clusterMemberList.length);
      for (let iter27 in this.clusterMemberList) {
        if (this.clusterMemberList.hasOwnProperty(iter27)) {
          iter27 = this.clusterMemberList[iter27];
          iter27.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.clusterList !== null && this.clusterList !== undefined) {
      output.writeFieldBegin('clusterList', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRUCT, this.clusterList.length);
      for (let iter28 in this.clusterList) {
        if (this.clusterList.hasOwnProperty(iter28)) {
          iter28 = this.clusterList[iter28];
          iter28.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.rootClusterIndexList !== null && this.rootClusterIndexList !== undefined) {
      output.writeFieldBegin('rootClusterIndexList', Thrift.Type.LIST, 5);
      output.writeListBegin(Thrift.Type.I32, this.rootClusterIndexList.length);
      for (let iter29 in this.rootClusterIndexList) {
        if (this.rootClusterIndexList.hasOwnProperty(iter29)) {
          iter29 = this.rootClusterIndexList[iter29];
          output.writeI32(iter29);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
