//
// Autogenerated by Thrift Compiler (0.18.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');

const structure_ttypes = require('./structure_types');
const metadata_ttypes = require('./metadata_types');
const uuid_ttypes = require('./uuid_types');
const linking_ttypes = require('./linking_types');


const ttypes = module.exports = {};
const Entity = module.exports.Entity = class {
  constructor(args) {
    this.uuid = null;
    this.id = null;
    this.mentionIdList = null;
    this.rawMentionList = null;
    this.type = null;
    this.confidence = null;
    this.canonicalName = null;
    if (args) {
      if (args.uuid !== undefined && args.uuid !== null) {
        this.uuid = new uuid_ttypes.UUID(args.uuid);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
      }
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.mentionIdList !== undefined && args.mentionIdList !== null) {
        this.mentionIdList = Thrift.copyList(args.mentionIdList, [uuid_ttypes.UUID]);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field mentionIdList is unset!');
      }
      if (args.rawMentionList !== undefined && args.rawMentionList !== null) {
        this.rawMentionList = Thrift.copyList(args.rawMentionList, [structure_ttypes.TokenRefSequence]);
      }
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
      if (args.confidence !== undefined && args.confidence !== null) {
        this.confidence = args.confidence;
      }
      if (args.canonicalName !== undefined && args.canonicalName !== null) {
        this.canonicalName = args.canonicalName;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.uuid = new uuid_ttypes.UUID();
          this.uuid.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.mentionIdList = [];
          const _rtmp31 = input.readListBegin();
          const _size0 = _rtmp31.size || 0;
          for (let _i2 = 0; _i2 < _size0; ++_i2) {
            let elem3 = null;
            elem3 = new uuid_ttypes.UUID();
            elem3.read(input);
            this.mentionIdList.push(elem3);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.LIST) {
          this.rawMentionList = [];
          const _rtmp35 = input.readListBegin();
          const _size4 = _rtmp35.size || 0;
          for (let _i6 = 0; _i6 < _size4; ++_i6) {
            let elem7 = null;
            elem7 = new structure_ttypes.TokenRefSequence();
            elem7.read(input);
            this.rawMentionList.push(elem7);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.type = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.DOUBLE) {
          this.confidence = input.readDouble();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.canonicalName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Entity');
    if (this.uuid !== null && this.uuid !== undefined) {
      output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 1);
      this.uuid.write(output);
      output.writeFieldEnd();
    }
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 6);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.mentionIdList !== null && this.mentionIdList !== undefined) {
      output.writeFieldBegin('mentionIdList', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.mentionIdList.length);
      for (let iter8 in this.mentionIdList) {
        if (this.mentionIdList.hasOwnProperty(iter8)) {
          iter8 = this.mentionIdList[iter8];
          iter8.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.rawMentionList !== null && this.rawMentionList !== undefined) {
      output.writeFieldBegin('rawMentionList', Thrift.Type.LIST, 7);
      output.writeListBegin(Thrift.Type.STRUCT, this.rawMentionList.length);
      for (let iter9 in this.rawMentionList) {
        if (this.rawMentionList.hasOwnProperty(iter9)) {
          iter9 = this.rawMentionList[iter9];
          iter9.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.STRING, 3);
      output.writeString(this.type);
      output.writeFieldEnd();
    }
    if (this.confidence !== null && this.confidence !== undefined) {
      output.writeFieldBegin('confidence', Thrift.Type.DOUBLE, 4);
      output.writeDouble(this.confidence);
      output.writeFieldEnd();
    }
    if (this.canonicalName !== null && this.canonicalName !== undefined) {
      output.writeFieldBegin('canonicalName', Thrift.Type.STRING, 5);
      output.writeString(this.canonicalName);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const EntitySet = module.exports.EntitySet = class {
  constructor(args) {
    this.uuid = null;
    this.metadata = null;
    this.entityList = null;
    this.linkingList = null;
    this.mentionSetId = null;
    if (args) {
      if (args.uuid !== undefined && args.uuid !== null) {
        this.uuid = new uuid_ttypes.UUID(args.uuid);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
      }
      if (args.metadata !== undefined && args.metadata !== null) {
        this.metadata = new metadata_ttypes.AnnotationMetadata(args.metadata);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metadata is unset!');
      }
      if (args.entityList !== undefined && args.entityList !== null) {
        this.entityList = Thrift.copyList(args.entityList, [ttypes.Entity]);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field entityList is unset!');
      }
      if (args.linkingList !== undefined && args.linkingList !== null) {
        this.linkingList = Thrift.copyList(args.linkingList, [linking_ttypes.Linking]);
      }
      if (args.mentionSetId !== undefined && args.mentionSetId !== null) {
        this.mentionSetId = new uuid_ttypes.UUID(args.mentionSetId);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.uuid = new uuid_ttypes.UUID();
          this.uuid.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.metadata = new metadata_ttypes.AnnotationMetadata();
          this.metadata.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.entityList = [];
          const _rtmp311 = input.readListBegin();
          const _size10 = _rtmp311.size || 0;
          for (let _i12 = 0; _i12 < _size10; ++_i12) {
            let elem13 = null;
            elem13 = new ttypes.Entity();
            elem13.read(input);
            this.entityList.push(elem13);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.linkingList = [];
          const _rtmp315 = input.readListBegin();
          const _size14 = _rtmp315.size || 0;
          for (let _i16 = 0; _i16 < _size14; ++_i16) {
            let elem17 = null;
            elem17 = new linking_ttypes.Linking();
            elem17.read(input);
            this.linkingList.push(elem17);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.mentionSetId = new uuid_ttypes.UUID();
          this.mentionSetId.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('EntitySet');
    if (this.uuid !== null && this.uuid !== undefined) {
      output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 1);
      this.uuid.write(output);
      output.writeFieldEnd();
    }
    if (this.metadata !== null && this.metadata !== undefined) {
      output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
      this.metadata.write(output);
      output.writeFieldEnd();
    }
    if (this.entityList !== null && this.entityList !== undefined) {
      output.writeFieldBegin('entityList', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.entityList.length);
      for (let iter18 in this.entityList) {
        if (this.entityList.hasOwnProperty(iter18)) {
          iter18 = this.entityList[iter18];
          iter18.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.linkingList !== null && this.linkingList !== undefined) {
      output.writeFieldBegin('linkingList', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRUCT, this.linkingList.length);
      for (let iter19 in this.linkingList) {
        if (this.linkingList.hasOwnProperty(iter19)) {
          iter19 = this.linkingList[iter19];
          iter19.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.mentionSetId !== null && this.mentionSetId !== undefined) {
      output.writeFieldBegin('mentionSetId', Thrift.Type.STRUCT, 5);
      this.mentionSetId.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const EntityMention = module.exports.EntityMention = class {
  constructor(args) {
    this.uuid = null;
    this.id = null;
    this.tokens = null;
    this.entityType = null;
    this.phraseType = null;
    this.confidence = null;
    this.text = null;
    this.childMentionIdList = null;
    if (args) {
      if (args.uuid !== undefined && args.uuid !== null) {
        this.uuid = new uuid_ttypes.UUID(args.uuid);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
      }
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.tokens !== undefined && args.tokens !== null) {
        this.tokens = new structure_ttypes.TokenRefSequence(args.tokens);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tokens is unset!');
      }
      if (args.entityType !== undefined && args.entityType !== null) {
        this.entityType = args.entityType;
      }
      if (args.phraseType !== undefined && args.phraseType !== null) {
        this.phraseType = args.phraseType;
      }
      if (args.confidence !== undefined && args.confidence !== null) {
        this.confidence = args.confidence;
      }
      if (args.text !== undefined && args.text !== null) {
        this.text = args.text;
      }
      if (args.childMentionIdList !== undefined && args.childMentionIdList !== null) {
        this.childMentionIdList = Thrift.copyList(args.childMentionIdList, [uuid_ttypes.UUID]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.uuid = new uuid_ttypes.UUID();
          this.uuid.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.tokens = new structure_ttypes.TokenRefSequence();
          this.tokens.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.entityType = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.phraseType = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.DOUBLE) {
          this.confidence = input.readDouble();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.text = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.LIST) {
          this.childMentionIdList = [];
          const _rtmp321 = input.readListBegin();
          const _size20 = _rtmp321.size || 0;
          for (let _i22 = 0; _i22 < _size20; ++_i22) {
            let elem23 = null;
            elem23 = new uuid_ttypes.UUID();
            elem23.read(input);
            this.childMentionIdList.push(elem23);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('EntityMention');
    if (this.uuid !== null && this.uuid !== undefined) {
      output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 1);
      this.uuid.write(output);
      output.writeFieldEnd();
    }
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 8);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.tokens !== null && this.tokens !== undefined) {
      output.writeFieldBegin('tokens', Thrift.Type.STRUCT, 2);
      this.tokens.write(output);
      output.writeFieldEnd();
    }
    if (this.entityType !== null && this.entityType !== undefined) {
      output.writeFieldBegin('entityType', Thrift.Type.STRING, 3);
      output.writeString(this.entityType);
      output.writeFieldEnd();
    }
    if (this.phraseType !== null && this.phraseType !== undefined) {
      output.writeFieldBegin('phraseType', Thrift.Type.STRING, 4);
      output.writeString(this.phraseType);
      output.writeFieldEnd();
    }
    if (this.confidence !== null && this.confidence !== undefined) {
      output.writeFieldBegin('confidence', Thrift.Type.DOUBLE, 5);
      output.writeDouble(this.confidence);
      output.writeFieldEnd();
    }
    if (this.text !== null && this.text !== undefined) {
      output.writeFieldBegin('text', Thrift.Type.STRING, 6);
      output.writeString(this.text);
      output.writeFieldEnd();
    }
    if (this.childMentionIdList !== null && this.childMentionIdList !== undefined) {
      output.writeFieldBegin('childMentionIdList', Thrift.Type.LIST, 7);
      output.writeListBegin(Thrift.Type.STRUCT, this.childMentionIdList.length);
      for (let iter24 in this.childMentionIdList) {
        if (this.childMentionIdList.hasOwnProperty(iter24)) {
          iter24 = this.childMentionIdList[iter24];
          iter24.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const EntityMentionSet = module.exports.EntityMentionSet = class {
  constructor(args) {
    this.uuid = null;
    this.metadata = null;
    this.mentionList = null;
    this.linkingList = null;
    if (args) {
      if (args.uuid !== undefined && args.uuid !== null) {
        this.uuid = new uuid_ttypes.UUID(args.uuid);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
      }
      if (args.metadata !== undefined && args.metadata !== null) {
        this.metadata = new metadata_ttypes.AnnotationMetadata(args.metadata);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metadata is unset!');
      }
      if (args.mentionList !== undefined && args.mentionList !== null) {
        this.mentionList = Thrift.copyList(args.mentionList, [ttypes.EntityMention]);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field mentionList is unset!');
      }
      if (args.linkingList !== undefined && args.linkingList !== null) {
        this.linkingList = Thrift.copyList(args.linkingList, [linking_ttypes.Linking]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.uuid = new uuid_ttypes.UUID();
          this.uuid.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.metadata = new metadata_ttypes.AnnotationMetadata();
          this.metadata.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.mentionList = [];
          const _rtmp326 = input.readListBegin();
          const _size25 = _rtmp326.size || 0;
          for (let _i27 = 0; _i27 < _size25; ++_i27) {
            let elem28 = null;
            elem28 = new ttypes.EntityMention();
            elem28.read(input);
            this.mentionList.push(elem28);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.linkingList = [];
          const _rtmp330 = input.readListBegin();
          const _size29 = _rtmp330.size || 0;
          for (let _i31 = 0; _i31 < _size29; ++_i31) {
            let elem32 = null;
            elem32 = new linking_ttypes.Linking();
            elem32.read(input);
            this.linkingList.push(elem32);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('EntityMentionSet');
    if (this.uuid !== null && this.uuid !== undefined) {
      output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 1);
      this.uuid.write(output);
      output.writeFieldEnd();
    }
    if (this.metadata !== null && this.metadata !== undefined) {
      output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
      this.metadata.write(output);
      output.writeFieldEnd();
    }
    if (this.mentionList !== null && this.mentionList !== undefined) {
      output.writeFieldBegin('mentionList', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.mentionList.length);
      for (let iter33 in this.mentionList) {
        if (this.mentionList.hasOwnProperty(iter33)) {
          iter33 = this.mentionList[iter33];
          iter33.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.linkingList !== null && this.linkingList !== undefined) {
      output.writeFieldBegin('linkingList', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRUCT, this.linkingList.length);
      for (let iter34 in this.linkingList) {
        if (this.linkingList.hasOwnProperty(iter34)) {
          iter34 = this.linkingList[iter34];
          iter34.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
