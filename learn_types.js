//
// Autogenerated by Thrift Compiler (0.18.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');

const services_ttypes = require('./services_types');
const uuid_ttypes = require('./uuid_types');
const communication_ttypes = require('./communication_types');


const ttypes = module.exports = {};
const AnnotationTask = module.exports.AnnotationTask = class {
  constructor(args) {
    this.type = null;
    this.language = null;
    this.unitType = null;
    this.units = null;
    if (args) {
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
      }
      if (args.language !== undefined && args.language !== null) {
        this.language = args.language;
      }
      if (args.unitType !== undefined && args.unitType !== null) {
        this.unitType = args.unitType;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitType is unset!');
      }
      if (args.units !== undefined && args.units !== null) {
        this.units = Thrift.copyList(args.units, [services_ttypes.AnnotationUnitIdentifier]);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field units is unset!');
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.language = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.unitType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.units = [];
          const _rtmp31 = input.readListBegin();
          const _size0 = _rtmp31.size || 0;
          for (let _i2 = 0; _i2 < _size0; ++_i2) {
            let elem3 = null;
            elem3 = new services_ttypes.AnnotationUnitIdentifier();
            elem3.read(input);
            this.units.push(elem3);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AnnotationTask');
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 1);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    if (this.language !== null && this.language !== undefined) {
      output.writeFieldBegin('language', Thrift.Type.STRING, 2);
      output.writeString(this.language);
      output.writeFieldEnd();
    }
    if (this.unitType !== null && this.unitType !== undefined) {
      output.writeFieldBegin('unitType', Thrift.Type.I32, 3);
      output.writeI32(this.unitType);
      output.writeFieldEnd();
    }
    if (this.units !== null && this.units !== undefined) {
      output.writeFieldBegin('units', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRUCT, this.units.length);
      for (let iter4 in this.units) {
        if (this.units.hasOwnProperty(iter4)) {
          iter4 = this.units[iter4];
          iter4.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Annotation = module.exports.Annotation = class {
  constructor(args) {
    this.id = null;
    this.communication = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = new services_ttypes.AnnotationUnitIdentifier(args.id);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
      }
      if (args.communication !== undefined && args.communication !== null) {
        this.communication = new communication_ttypes.Communication(args.communication);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field communication is unset!');
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.id = new services_ttypes.AnnotationUnitIdentifier();
          this.id.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.communication = new communication_ttypes.Communication();
          this.communication.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Annotation');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRUCT, 1);
      this.id.write(output);
      output.writeFieldEnd();
    }
    if (this.communication !== null && this.communication !== undefined) {
      output.writeFieldBegin('communication', Thrift.Type.STRUCT, 2);
      this.communication.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
