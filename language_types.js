//
// Autogenerated by Thrift Compiler (0.18.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');

const metadata_ttypes = require('./metadata_types');
const uuid_ttypes = require('./uuid_types');


const ttypes = module.exports = {};
const LanguageIdentification = module.exports.LanguageIdentification = class {
  constructor(args) {
    this.uuid = null;
    this.metadata = null;
    this.languageToProbabilityMap = null;
    if (args) {
      if (args.uuid !== undefined && args.uuid !== null) {
        this.uuid = new uuid_ttypes.UUID(args.uuid);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
      }
      if (args.metadata !== undefined && args.metadata !== null) {
        this.metadata = new metadata_ttypes.AnnotationMetadata(args.metadata);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metadata is unset!');
      }
      if (args.languageToProbabilityMap !== undefined && args.languageToProbabilityMap !== null) {
        this.languageToProbabilityMap = Thrift.copyMap(args.languageToProbabilityMap, [null]);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field languageToProbabilityMap is unset!');
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.uuid = new uuid_ttypes.UUID();
          this.uuid.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.metadata = new metadata_ttypes.AnnotationMetadata();
          this.metadata.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.MAP) {
          this.languageToProbabilityMap = {};
          const _rtmp31 = input.readMapBegin();
          const _size0 = _rtmp31.size || 0;
          for (let _i2 = 0; _i2 < _size0; ++_i2) {
            let key3 = null;
            let val4 = null;
            key3 = input.readString();
            val4 = input.readDouble();
            this.languageToProbabilityMap[key3] = val4;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('LanguageIdentification');
    if (this.uuid !== null && this.uuid !== undefined) {
      output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 1);
      this.uuid.write(output);
      output.writeFieldEnd();
    }
    if (this.metadata !== null && this.metadata !== undefined) {
      output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
      this.metadata.write(output);
      output.writeFieldEnd();
    }
    if (this.languageToProbabilityMap !== null && this.languageToProbabilityMap !== undefined) {
      output.writeFieldBegin('languageToProbabilityMap', Thrift.Type.MAP, 3);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.DOUBLE, Thrift.objectLength(this.languageToProbabilityMap));
      for (let kiter5 in this.languageToProbabilityMap) {
        if (this.languageToProbabilityMap.hasOwnProperty(kiter5)) {
          let viter6 = this.languageToProbabilityMap[kiter5];
          output.writeString(kiter5);
          output.writeDouble(viter6);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
