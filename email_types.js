//
// Autogenerated by Thrift Compiler (0.18.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');


const ttypes = module.exports = {};
const EmailAddress = module.exports.EmailAddress = class {
  constructor(args) {
    this.address = null;
    this.displayName = null;
    if (args) {
      if (args.address !== undefined && args.address !== null) {
        this.address = args.address;
      }
      if (args.displayName !== undefined && args.displayName !== null) {
        this.displayName = args.displayName;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.address = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.displayName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('EmailAddress');
    if (this.address !== null && this.address !== undefined) {
      output.writeFieldBegin('address', Thrift.Type.STRING, 1);
      output.writeString(this.address);
      output.writeFieldEnd();
    }
    if (this.displayName !== null && this.displayName !== undefined) {
      output.writeFieldBegin('displayName', Thrift.Type.STRING, 2);
      output.writeString(this.displayName);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const EmailCommunicationInfo = module.exports.EmailCommunicationInfo = class {
  constructor(args) {
    this.messageId = null;
    this.contentType = null;
    this.userAgent = null;
    this.inReplyToList = null;
    this.referenceList = null;
    this.senderAddress = null;
    this.returnPathAddress = null;
    this.toAddressList = null;
    this.ccAddressList = null;
    this.bccAddressList = null;
    this.emailFolder = null;
    this.subject = null;
    this.quotedAddresses = null;
    this.attachmentPaths = null;
    this.salutation = null;
    this.signature = null;
    if (args) {
      if (args.messageId !== undefined && args.messageId !== null) {
        this.messageId = args.messageId;
      }
      if (args.contentType !== undefined && args.contentType !== null) {
        this.contentType = args.contentType;
      }
      if (args.userAgent !== undefined && args.userAgent !== null) {
        this.userAgent = args.userAgent;
      }
      if (args.inReplyToList !== undefined && args.inReplyToList !== null) {
        this.inReplyToList = Thrift.copyList(args.inReplyToList, [null]);
      }
      if (args.referenceList !== undefined && args.referenceList !== null) {
        this.referenceList = Thrift.copyList(args.referenceList, [null]);
      }
      if (args.senderAddress !== undefined && args.senderAddress !== null) {
        this.senderAddress = new ttypes.EmailAddress(args.senderAddress);
      }
      if (args.returnPathAddress !== undefined && args.returnPathAddress !== null) {
        this.returnPathAddress = new ttypes.EmailAddress(args.returnPathAddress);
      }
      if (args.toAddressList !== undefined && args.toAddressList !== null) {
        this.toAddressList = Thrift.copyList(args.toAddressList, [ttypes.EmailAddress]);
      }
      if (args.ccAddressList !== undefined && args.ccAddressList !== null) {
        this.ccAddressList = Thrift.copyList(args.ccAddressList, [ttypes.EmailAddress]);
      }
      if (args.bccAddressList !== undefined && args.bccAddressList !== null) {
        this.bccAddressList = Thrift.copyList(args.bccAddressList, [ttypes.EmailAddress]);
      }
      if (args.emailFolder !== undefined && args.emailFolder !== null) {
        this.emailFolder = args.emailFolder;
      }
      if (args.subject !== undefined && args.subject !== null) {
        this.subject = args.subject;
      }
      if (args.quotedAddresses !== undefined && args.quotedAddresses !== null) {
        this.quotedAddresses = Thrift.copyList(args.quotedAddresses, [null]);
      }
      if (args.attachmentPaths !== undefined && args.attachmentPaths !== null) {
        this.attachmentPaths = Thrift.copyList(args.attachmentPaths, [null]);
      }
      if (args.salutation !== undefined && args.salutation !== null) {
        this.salutation = args.salutation;
      }
      if (args.signature !== undefined && args.signature !== null) {
        this.signature = args.signature;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.messageId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.contentType = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.userAgent = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.inReplyToList = [];
          const _rtmp31 = input.readListBegin();
          const _size0 = _rtmp31.size || 0;
          for (let _i2 = 0; _i2 < _size0; ++_i2) {
            let elem3 = null;
            elem3 = input.readString();
            this.inReplyToList.push(elem3);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.LIST) {
          this.referenceList = [];
          const _rtmp35 = input.readListBegin();
          const _size4 = _rtmp35.size || 0;
          for (let _i6 = 0; _i6 < _size4; ++_i6) {
            let elem7 = null;
            elem7 = input.readString();
            this.referenceList.push(elem7);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.senderAddress = new ttypes.EmailAddress();
          this.senderAddress.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRUCT) {
          this.returnPathAddress = new ttypes.EmailAddress();
          this.returnPathAddress.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.LIST) {
          this.toAddressList = [];
          const _rtmp39 = input.readListBegin();
          const _size8 = _rtmp39.size || 0;
          for (let _i10 = 0; _i10 < _size8; ++_i10) {
            let elem11 = null;
            elem11 = new ttypes.EmailAddress();
            elem11.read(input);
            this.toAddressList.push(elem11);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.LIST) {
          this.ccAddressList = [];
          const _rtmp313 = input.readListBegin();
          const _size12 = _rtmp313.size || 0;
          for (let _i14 = 0; _i14 < _size12; ++_i14) {
            let elem15 = null;
            elem15 = new ttypes.EmailAddress();
            elem15.read(input);
            this.ccAddressList.push(elem15);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.LIST) {
          this.bccAddressList = [];
          const _rtmp317 = input.readListBegin();
          const _size16 = _rtmp317.size || 0;
          for (let _i18 = 0; _i18 < _size16; ++_i18) {
            let elem19 = null;
            elem19 = new ttypes.EmailAddress();
            elem19.read(input);
            this.bccAddressList.push(elem19);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRING) {
          this.emailFolder = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.STRING) {
          this.subject = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.LIST) {
          this.quotedAddresses = [];
          const _rtmp321 = input.readListBegin();
          const _size20 = _rtmp321.size || 0;
          for (let _i22 = 0; _i22 < _size20; ++_i22) {
            let elem23 = null;
            elem23 = input.readString();
            this.quotedAddresses.push(elem23);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.LIST) {
          this.attachmentPaths = [];
          const _rtmp325 = input.readListBegin();
          const _size24 = _rtmp325.size || 0;
          for (let _i26 = 0; _i26 < _size24; ++_i26) {
            let elem27 = null;
            elem27 = input.readString();
            this.attachmentPaths.push(elem27);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.STRING) {
          this.salutation = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 16:
        if (ftype == Thrift.Type.STRING) {
          this.signature = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('EmailCommunicationInfo');
    if (this.messageId !== null && this.messageId !== undefined) {
      output.writeFieldBegin('messageId', Thrift.Type.STRING, 1);
      output.writeString(this.messageId);
      output.writeFieldEnd();
    }
    if (this.contentType !== null && this.contentType !== undefined) {
      output.writeFieldBegin('contentType', Thrift.Type.STRING, 2);
      output.writeString(this.contentType);
      output.writeFieldEnd();
    }
    if (this.userAgent !== null && this.userAgent !== undefined) {
      output.writeFieldBegin('userAgent', Thrift.Type.STRING, 3);
      output.writeString(this.userAgent);
      output.writeFieldEnd();
    }
    if (this.inReplyToList !== null && this.inReplyToList !== undefined) {
      output.writeFieldBegin('inReplyToList', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRING, this.inReplyToList.length);
      for (let iter28 in this.inReplyToList) {
        if (this.inReplyToList.hasOwnProperty(iter28)) {
          iter28 = this.inReplyToList[iter28];
          output.writeString(iter28);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.referenceList !== null && this.referenceList !== undefined) {
      output.writeFieldBegin('referenceList', Thrift.Type.LIST, 5);
      output.writeListBegin(Thrift.Type.STRING, this.referenceList.length);
      for (let iter29 in this.referenceList) {
        if (this.referenceList.hasOwnProperty(iter29)) {
          iter29 = this.referenceList[iter29];
          output.writeString(iter29);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.senderAddress !== null && this.senderAddress !== undefined) {
      output.writeFieldBegin('senderAddress', Thrift.Type.STRUCT, 6);
      this.senderAddress.write(output);
      output.writeFieldEnd();
    }
    if (this.returnPathAddress !== null && this.returnPathAddress !== undefined) {
      output.writeFieldBegin('returnPathAddress', Thrift.Type.STRUCT, 7);
      this.returnPathAddress.write(output);
      output.writeFieldEnd();
    }
    if (this.toAddressList !== null && this.toAddressList !== undefined) {
      output.writeFieldBegin('toAddressList', Thrift.Type.LIST, 8);
      output.writeListBegin(Thrift.Type.STRUCT, this.toAddressList.length);
      for (let iter30 in this.toAddressList) {
        if (this.toAddressList.hasOwnProperty(iter30)) {
          iter30 = this.toAddressList[iter30];
          iter30.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ccAddressList !== null && this.ccAddressList !== undefined) {
      output.writeFieldBegin('ccAddressList', Thrift.Type.LIST, 9);
      output.writeListBegin(Thrift.Type.STRUCT, this.ccAddressList.length);
      for (let iter31 in this.ccAddressList) {
        if (this.ccAddressList.hasOwnProperty(iter31)) {
          iter31 = this.ccAddressList[iter31];
          iter31.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.bccAddressList !== null && this.bccAddressList !== undefined) {
      output.writeFieldBegin('bccAddressList', Thrift.Type.LIST, 10);
      output.writeListBegin(Thrift.Type.STRUCT, this.bccAddressList.length);
      for (let iter32 in this.bccAddressList) {
        if (this.bccAddressList.hasOwnProperty(iter32)) {
          iter32 = this.bccAddressList[iter32];
          iter32.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.emailFolder !== null && this.emailFolder !== undefined) {
      output.writeFieldBegin('emailFolder', Thrift.Type.STRING, 11);
      output.writeString(this.emailFolder);
      output.writeFieldEnd();
    }
    if (this.subject !== null && this.subject !== undefined) {
      output.writeFieldBegin('subject', Thrift.Type.STRING, 12);
      output.writeString(this.subject);
      output.writeFieldEnd();
    }
    if (this.quotedAddresses !== null && this.quotedAddresses !== undefined) {
      output.writeFieldBegin('quotedAddresses', Thrift.Type.LIST, 13);
      output.writeListBegin(Thrift.Type.STRING, this.quotedAddresses.length);
      for (let iter33 in this.quotedAddresses) {
        if (this.quotedAddresses.hasOwnProperty(iter33)) {
          iter33 = this.quotedAddresses[iter33];
          output.writeString(iter33);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.attachmentPaths !== null && this.attachmentPaths !== undefined) {
      output.writeFieldBegin('attachmentPaths', Thrift.Type.LIST, 14);
      output.writeListBegin(Thrift.Type.STRING, this.attachmentPaths.length);
      for (let iter34 in this.attachmentPaths) {
        if (this.attachmentPaths.hasOwnProperty(iter34)) {
          iter34 = this.attachmentPaths[iter34];
          output.writeString(iter34);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.salutation !== null && this.salutation !== undefined) {
      output.writeFieldBegin('salutation', Thrift.Type.STRING, 15);
      output.writeString(this.salutation);
      output.writeFieldEnd();
    }
    if (this.signature !== null && this.signature !== undefined) {
      output.writeFieldBegin('signature', Thrift.Type.STRING, 16);
      output.writeString(this.signature);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
