//
// Autogenerated by Thrift Compiler (0.18.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');

const communication_ttypes = require('./communication_types');
const services_ttypes = require('./services_types');


const Service = require('./Service');
const ServiceClient = Service.Client;
const ServiceProcessor = Service.Processor;
const ttypes = require('./access_types');
//HELPER FUNCTIONS AND STRUCTURES

const FetchCommunicationService_fetch_args = class {
  constructor(args) {
    this.request = null;
    if (args) {
      if (args.request !== undefined && args.request !== null) {
        this.request = new ttypes.FetchRequest(args.request);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.request = new ttypes.FetchRequest();
          this.request.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('FetchCommunicationService_fetch_args');
    if (this.request !== null && this.request !== undefined) {
      output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
      this.request.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const FetchCommunicationService_fetch_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    if (args instanceof services_ttypes.ServicesException) {
        this.ex = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.FetchResult(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.FetchResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new services_ttypes.ServicesException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('FetchCommunicationService_fetch_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const FetchCommunicationService_getCommunicationIDs_args = class {
  constructor(args) {
    this.offset = null;
    this.count = null;
    if (args) {
      if (args.offset !== undefined && args.offset !== null) {
        this.offset = args.offset;
      }
      if (args.count !== undefined && args.count !== null) {
        this.count = args.count;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.offset = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.count = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('FetchCommunicationService_getCommunicationIDs_args');
    if (this.offset !== null && this.offset !== undefined) {
      output.writeFieldBegin('offset', Thrift.Type.I64, 1);
      output.writeI64(this.offset);
      output.writeFieldEnd();
    }
    if (this.count !== null && this.count !== undefined) {
      output.writeFieldBegin('count', Thrift.Type.I64, 2);
      output.writeI64(this.count);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const FetchCommunicationService_getCommunicationIDs_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    if (args instanceof services_ttypes.NotImplementedException) {
        this.ex = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp311 = input.readListBegin();
          const _size10 = _rtmp311.size || 0;
          for (let _i12 = 0; _i12 < _size10; ++_i12) {
            let elem13 = null;
            elem13 = input.readString();
            this.success.push(elem13);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new services_ttypes.NotImplementedException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('FetchCommunicationService_getCommunicationIDs_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRING, this.success.length);
      for (let iter14 in this.success) {
        if (this.success.hasOwnProperty(iter14)) {
          iter14 = this.success[iter14];
          output.writeString(iter14);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const FetchCommunicationService_getCommunicationCount_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('FetchCommunicationService_getCommunicationCount_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const FetchCommunicationService_getCommunicationCount_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    if (args instanceof services_ttypes.NotImplementedException) {
        this.ex = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new services_ttypes.NotImplementedException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('FetchCommunicationService_getCommunicationCount_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const FetchCommunicationServiceClient = exports.Client = class FetchCommunicationServiceClient extends ServiceClient {
  constructor(output, pClass) {
    super(output, pClass);
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
  }
  seqid () { return this._seqid; }
  new_seqid () { return this._seqid += 1; }

  fetch (request) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_fetch(request);
    });
  }

  send_fetch (request) {
    const output = new this.pClass(this.output);
    const params = {
      request: request
    };
    const args = new FetchCommunicationService_fetch_args(params);
    try {
      output.writeMessageBegin('fetch', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_fetch (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new FetchCommunicationService_fetch_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('fetch failed: unknown result');
  }

  getCommunicationIDs (offset, count) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getCommunicationIDs(offset, count);
    });
  }

  send_getCommunicationIDs (offset, count) {
    const output = new this.pClass(this.output);
    const params = {
      offset: offset,
      count: count
    };
    const args = new FetchCommunicationService_getCommunicationIDs_args(params);
    try {
      output.writeMessageBegin('getCommunicationIDs', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getCommunicationIDs (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new FetchCommunicationService_getCommunicationIDs_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCommunicationIDs failed: unknown result');
  }

  getCommunicationCount () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getCommunicationCount();
    });
  }

  send_getCommunicationCount () {
    const output = new this.pClass(this.output);
    const args = new FetchCommunicationService_getCommunicationCount_args();
    try {
      output.writeMessageBegin('getCommunicationCount', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getCommunicationCount (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new FetchCommunicationService_getCommunicationCount_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCommunicationCount failed: unknown result');
  }
};
const FetchCommunicationServiceProcessor = exports.Processor = class FetchCommunicationServiceProcessor extends ServiceProcessor {
  constructor(handler) {
    super(handler);
    this._handler = handler;
  }
  process (input, output) {
    const r = input.readMessageBegin();
    if (this['process_' + r.fname]) {
      return this['process_' + r.fname].call(this, r.rseqid, input, output);
    } else {
      input.skip(Thrift.Type.STRUCT);
      input.readMessageEnd();
      const x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
      output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
      x.write(output);
      output.writeMessageEnd();
      output.flush();
    }
  }
  process_fetch (seqid, input, output) {
    const args = new FetchCommunicationService_fetch_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.fetch.length === 1) {
      new Promise((resolve) => resolve(this._handler.fetch.bind(this._handler)(
        args.request
      ))).then(result => {
        const result_obj = new FetchCommunicationService_fetch_result({success: result});
        output.writeMessageBegin("fetch", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof services_ttypes.ServicesException) {
          result = new FetchCommunicationService_fetch_result(err);
          output.writeMessageBegin("fetch", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("fetch", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.fetch(args.request, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof services_ttypes.ServicesException) {
          result_obj = new FetchCommunicationService_fetch_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("fetch", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("fetch", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getCommunicationIDs (seqid, input, output) {
    const args = new FetchCommunicationService_getCommunicationIDs_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getCommunicationIDs.length === 2) {
      new Promise((resolve) => resolve(this._handler.getCommunicationIDs.bind(this._handler)(
        args.offset,
        args.count
      ))).then(result => {
        const result_obj = new FetchCommunicationService_getCommunicationIDs_result({success: result});
        output.writeMessageBegin("getCommunicationIDs", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof services_ttypes.NotImplementedException) {
          result = new FetchCommunicationService_getCommunicationIDs_result(err);
          output.writeMessageBegin("getCommunicationIDs", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCommunicationIDs", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getCommunicationIDs(args.offset, args.count, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof services_ttypes.NotImplementedException) {
          result_obj = new FetchCommunicationService_getCommunicationIDs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getCommunicationIDs", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCommunicationIDs", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getCommunicationCount (seqid, input, output) {
    const args = new FetchCommunicationService_getCommunicationCount_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getCommunicationCount.length === 0) {
      new Promise((resolve) => resolve(this._handler.getCommunicationCount.bind(this._handler)(
      ))).then(result => {
        const result_obj = new FetchCommunicationService_getCommunicationCount_result({success: result});
        output.writeMessageBegin("getCommunicationCount", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof services_ttypes.NotImplementedException) {
          result = new FetchCommunicationService_getCommunicationCount_result(err);
          output.writeMessageBegin("getCommunicationCount", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCommunicationCount", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getCommunicationCount((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof services_ttypes.NotImplementedException) {
          result_obj = new FetchCommunicationService_getCommunicationCount_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getCommunicationCount", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCommunicationCount", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
};
