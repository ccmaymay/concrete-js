//
// Autogenerated by Thrift Compiler (0.18.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');

const communication_ttypes = require('./communication_types');
const services_ttypes = require('./services_types');
const structure_ttypes = require('./structure_types');
const uuid_ttypes = require('./uuid_types');
const metadata_ttypes = require('./metadata_types');
const entities_ttypes = require('./entities_types');


const Service = require('./Service');
const ServiceClient = Service.Client;
const ServiceProcessor = Service.Processor;
const ttypes = require('./search_types');
//HELPER FUNCTIONS AND STRUCTURES

const FeedbackService_startFeedback_args = class {
  constructor(args) {
    this.results = null;
    if (args) {
      if (args.results !== undefined && args.results !== null) {
        this.results = new ttypes.SearchResult(args.results);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.results = new ttypes.SearchResult();
          this.results.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('FeedbackService_startFeedback_args');
    if (this.results !== null && this.results !== undefined) {
      output.writeFieldBegin('results', Thrift.Type.STRUCT, 1);
      this.results.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const FeedbackService_startFeedback_result = class {
  constructor(args) {
    this.ex = null;
    if (args instanceof services_ttypes.ServicesException) {
        this.ex = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new services_ttypes.ServicesException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('FeedbackService_startFeedback_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const FeedbackService_addCommunicationFeedback_args = class {
  constructor(args) {
    this.searchResultsId = null;
    this.communicationId = null;
    this.feedback = null;
    if (args) {
      if (args.searchResultsId !== undefined && args.searchResultsId !== null) {
        this.searchResultsId = new uuid_ttypes.UUID(args.searchResultsId);
      }
      if (args.communicationId !== undefined && args.communicationId !== null) {
        this.communicationId = args.communicationId;
      }
      if (args.feedback !== undefined && args.feedback !== null) {
        this.feedback = args.feedback;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.searchResultsId = new uuid_ttypes.UUID();
          this.searchResultsId.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.communicationId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.feedback = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('FeedbackService_addCommunicationFeedback_args');
    if (this.searchResultsId !== null && this.searchResultsId !== undefined) {
      output.writeFieldBegin('searchResultsId', Thrift.Type.STRUCT, 1);
      this.searchResultsId.write(output);
      output.writeFieldEnd();
    }
    if (this.communicationId !== null && this.communicationId !== undefined) {
      output.writeFieldBegin('communicationId', Thrift.Type.STRING, 2);
      output.writeString(this.communicationId);
      output.writeFieldEnd();
    }
    if (this.feedback !== null && this.feedback !== undefined) {
      output.writeFieldBegin('feedback', Thrift.Type.I32, 3);
      output.writeI32(this.feedback);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const FeedbackService_addCommunicationFeedback_result = class {
  constructor(args) {
    this.ex = null;
    if (args instanceof services_ttypes.ServicesException) {
        this.ex = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new services_ttypes.ServicesException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('FeedbackService_addCommunicationFeedback_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const FeedbackService_addSentenceFeedback_args = class {
  constructor(args) {
    this.searchResultsId = null;
    this.communicationId = null;
    this.sentenceId = null;
    this.feedback = null;
    if (args) {
      if (args.searchResultsId !== undefined && args.searchResultsId !== null) {
        this.searchResultsId = new uuid_ttypes.UUID(args.searchResultsId);
      }
      if (args.communicationId !== undefined && args.communicationId !== null) {
        this.communicationId = args.communicationId;
      }
      if (args.sentenceId !== undefined && args.sentenceId !== null) {
        this.sentenceId = new uuid_ttypes.UUID(args.sentenceId);
      }
      if (args.feedback !== undefined && args.feedback !== null) {
        this.feedback = args.feedback;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.searchResultsId = new uuid_ttypes.UUID();
          this.searchResultsId.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.communicationId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.sentenceId = new uuid_ttypes.UUID();
          this.sentenceId.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.feedback = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('FeedbackService_addSentenceFeedback_args');
    if (this.searchResultsId !== null && this.searchResultsId !== undefined) {
      output.writeFieldBegin('searchResultsId', Thrift.Type.STRUCT, 1);
      this.searchResultsId.write(output);
      output.writeFieldEnd();
    }
    if (this.communicationId !== null && this.communicationId !== undefined) {
      output.writeFieldBegin('communicationId', Thrift.Type.STRING, 2);
      output.writeString(this.communicationId);
      output.writeFieldEnd();
    }
    if (this.sentenceId !== null && this.sentenceId !== undefined) {
      output.writeFieldBegin('sentenceId', Thrift.Type.STRUCT, 3);
      this.sentenceId.write(output);
      output.writeFieldEnd();
    }
    if (this.feedback !== null && this.feedback !== undefined) {
      output.writeFieldBegin('feedback', Thrift.Type.I32, 4);
      output.writeI32(this.feedback);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const FeedbackService_addSentenceFeedback_result = class {
  constructor(args) {
    this.ex = null;
    if (args instanceof services_ttypes.ServicesException) {
        this.ex = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new services_ttypes.ServicesException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('FeedbackService_addSentenceFeedback_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const FeedbackServiceClient = exports.Client = class FeedbackServiceClient extends ServiceClient {
  constructor(output, pClass) {
    super(output, pClass);
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
  }
  seqid () { return this._seqid; }
  new_seqid () { return this._seqid += 1; }

  startFeedback (results) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_startFeedback(results);
    });
  }

  send_startFeedback (results) {
    const output = new this.pClass(this.output);
    const params = {
      results: results
    };
    const args = new FeedbackService_startFeedback_args(params);
    try {
      output.writeMessageBegin('startFeedback', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_startFeedback (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new FeedbackService_startFeedback_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    callback(null);
  }

  addCommunicationFeedback (searchResultsId, communicationId, feedback) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_addCommunicationFeedback(searchResultsId, communicationId, feedback);
    });
  }

  send_addCommunicationFeedback (searchResultsId, communicationId, feedback) {
    const output = new this.pClass(this.output);
    const params = {
      searchResultsId: searchResultsId,
      communicationId: communicationId,
      feedback: feedback
    };
    const args = new FeedbackService_addCommunicationFeedback_args(params);
    try {
      output.writeMessageBegin('addCommunicationFeedback', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_addCommunicationFeedback (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new FeedbackService_addCommunicationFeedback_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    callback(null);
  }

  addSentenceFeedback (searchResultsId, communicationId, sentenceId, feedback) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_addSentenceFeedback(searchResultsId, communicationId, sentenceId, feedback);
    });
  }

  send_addSentenceFeedback (searchResultsId, communicationId, sentenceId, feedback) {
    const output = new this.pClass(this.output);
    const params = {
      searchResultsId: searchResultsId,
      communicationId: communicationId,
      sentenceId: sentenceId,
      feedback: feedback
    };
    const args = new FeedbackService_addSentenceFeedback_args(params);
    try {
      output.writeMessageBegin('addSentenceFeedback', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_addSentenceFeedback (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new FeedbackService_addSentenceFeedback_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    callback(null);
  }
};
const FeedbackServiceProcessor = exports.Processor = class FeedbackServiceProcessor extends ServiceProcessor {
  constructor(handler) {
    super(handler);
    this._handler = handler;
  }
  process (input, output) {
    const r = input.readMessageBegin();
    if (this['process_' + r.fname]) {
      return this['process_' + r.fname].call(this, r.rseqid, input, output);
    } else {
      input.skip(Thrift.Type.STRUCT);
      input.readMessageEnd();
      const x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
      output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
      x.write(output);
      output.writeMessageEnd();
      output.flush();
    }
  }
  process_startFeedback (seqid, input, output) {
    const args = new FeedbackService_startFeedback_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.startFeedback.length === 1) {
      new Promise((resolve) => resolve(this._handler.startFeedback.bind(this._handler)(
        args.results
      ))).then(result => {
        const result_obj = new FeedbackService_startFeedback_result({success: result});
        output.writeMessageBegin("startFeedback", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof services_ttypes.ServicesException) {
          result = new FeedbackService_startFeedback_result(err);
          output.writeMessageBegin("startFeedback", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("startFeedback", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.startFeedback(args.results, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof services_ttypes.ServicesException) {
          result_obj = new FeedbackService_startFeedback_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("startFeedback", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("startFeedback", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_addCommunicationFeedback (seqid, input, output) {
    const args = new FeedbackService_addCommunicationFeedback_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.addCommunicationFeedback.length === 3) {
      new Promise((resolve) => resolve(this._handler.addCommunicationFeedback.bind(this._handler)(
        args.searchResultsId,
        args.communicationId,
        args.feedback
      ))).then(result => {
        const result_obj = new FeedbackService_addCommunicationFeedback_result({success: result});
        output.writeMessageBegin("addCommunicationFeedback", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof services_ttypes.ServicesException) {
          result = new FeedbackService_addCommunicationFeedback_result(err);
          output.writeMessageBegin("addCommunicationFeedback", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addCommunicationFeedback", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.addCommunicationFeedback(args.searchResultsId, args.communicationId, args.feedback, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof services_ttypes.ServicesException) {
          result_obj = new FeedbackService_addCommunicationFeedback_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("addCommunicationFeedback", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addCommunicationFeedback", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_addSentenceFeedback (seqid, input, output) {
    const args = new FeedbackService_addSentenceFeedback_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.addSentenceFeedback.length === 4) {
      new Promise((resolve) => resolve(this._handler.addSentenceFeedback.bind(this._handler)(
        args.searchResultsId,
        args.communicationId,
        args.sentenceId,
        args.feedback
      ))).then(result => {
        const result_obj = new FeedbackService_addSentenceFeedback_result({success: result});
        output.writeMessageBegin("addSentenceFeedback", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof services_ttypes.ServicesException) {
          result = new FeedbackService_addSentenceFeedback_result(err);
          output.writeMessageBegin("addSentenceFeedback", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addSentenceFeedback", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.addSentenceFeedback(args.searchResultsId, args.communicationId, args.sentenceId, args.feedback, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof services_ttypes.ServicesException) {
          result_obj = new FeedbackService_addSentenceFeedback_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("addSentenceFeedback", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addSentenceFeedback", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
};
