//
// Autogenerated by Thrift Compiler (0.18.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');


const ttypes = module.exports = {};
const ConcreteThriftException = module.exports.ConcreteThriftException = class extends Thrift.TException {
  constructor(args) {
    super(args);
    this.name = "ConcreteThriftException";
    this.message = null;
    this.serEx = null;
    if (args) {
      if (args.message !== undefined && args.message !== null) {
        this.message = args.message;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
      }
      if (args.serEx !== undefined && args.serEx !== null) {
        this.serEx = args.serEx;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.message = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.serEx = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ConcreteThriftException');
    if (this.message !== null && this.message !== undefined) {
      output.writeFieldBegin('message', Thrift.Type.STRING, 1);
      output.writeString(this.message);
      output.writeFieldEnd();
    }
    if (this.serEx !== null && this.serEx !== undefined) {
      output.writeFieldBegin('serEx', Thrift.Type.STRING, 2);
      output.writeBinary(this.serEx);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
