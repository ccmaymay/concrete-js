//
// Autogenerated by Thrift Compiler (0.18.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');

const uuid_ttypes = require('./uuid_types');


const ttypes = module.exports = {};
ttypes.AnnotationTaskType = {
  'TRANSLATION' : 1,
  'NER' : 2,
  'TOPICID' : 3
};
ttypes.AnnotationUnitType = {
  'COMMUNICATION' : 1,
  'SENTENCE' : 2
};
const ServicesException = module.exports.ServicesException = class extends Thrift.TException {
  constructor(args) {
    super(args);
    this.name = "ServicesException";
    this.message = null;
    this.serEx = null;
    if (args) {
      if (args.message !== undefined && args.message !== null) {
        this.message = args.message;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
      }
      if (args.serEx !== undefined && args.serEx !== null) {
        this.serEx = args.serEx;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.message = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.serEx = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ServicesException');
    if (this.message !== null && this.message !== undefined) {
      output.writeFieldBegin('message', Thrift.Type.STRING, 1);
      output.writeString(this.message);
      output.writeFieldEnd();
    }
    if (this.serEx !== null && this.serEx !== undefined) {
      output.writeFieldBegin('serEx', Thrift.Type.STRING, 2);
      output.writeBinary(this.serEx);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const NotImplementedException = module.exports.NotImplementedException = class extends Thrift.TException {
  constructor(args) {
    super(args);
    this.name = "NotImplementedException";
    this.message = null;
    this.serEx = null;
    if (args) {
      if (args.message !== undefined && args.message !== null) {
        this.message = args.message;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
      }
      if (args.serEx !== undefined && args.serEx !== null) {
        this.serEx = args.serEx;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.message = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.serEx = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('NotImplementedException');
    if (this.message !== null && this.message !== undefined) {
      output.writeFieldBegin('message', Thrift.Type.STRING, 1);
      output.writeString(this.message);
      output.writeFieldEnd();
    }
    if (this.serEx !== null && this.serEx !== undefined) {
      output.writeFieldBegin('serEx', Thrift.Type.STRING, 2);
      output.writeBinary(this.serEx);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AsyncContactInfo = module.exports.AsyncContactInfo = class {
  constructor(args) {
    this.host = null;
    this.port = null;
    if (args) {
      if (args.host !== undefined && args.host !== null) {
        this.host = args.host;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field host is unset!');
      }
      if (args.port !== undefined && args.port !== null) {
        this.port = args.port;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field port is unset!');
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.host = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.port = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AsyncContactInfo');
    if (this.host !== null && this.host !== undefined) {
      output.writeFieldBegin('host', Thrift.Type.STRING, 1);
      output.writeString(this.host);
      output.writeFieldEnd();
    }
    if (this.port !== null && this.port !== undefined) {
      output.writeFieldBegin('port', Thrift.Type.I32, 2);
      output.writeI32(this.port);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AnnotationUnitIdentifier = module.exports.AnnotationUnitIdentifier = class {
  constructor(args) {
    this.communicationId = null;
    this.sentenceId = null;
    if (args) {
      if (args.communicationId !== undefined && args.communicationId !== null) {
        this.communicationId = args.communicationId;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field communicationId is unset!');
      }
      if (args.sentenceId !== undefined && args.sentenceId !== null) {
        this.sentenceId = new uuid_ttypes.UUID(args.sentenceId);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.communicationId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.sentenceId = new uuid_ttypes.UUID();
          this.sentenceId.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AnnotationUnitIdentifier');
    if (this.communicationId !== null && this.communicationId !== undefined) {
      output.writeFieldBegin('communicationId', Thrift.Type.STRING, 1);
      output.writeString(this.communicationId);
      output.writeFieldEnd();
    }
    if (this.sentenceId !== null && this.sentenceId !== undefined) {
      output.writeFieldBegin('sentenceId', Thrift.Type.STRUCT, 2);
      this.sentenceId.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ServiceInfo = module.exports.ServiceInfo = class {
  constructor(args) {
    this.name = null;
    this.version = null;
    this.description = null;
    if (args) {
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
      }
      if (args.version !== undefined && args.version !== null) {
        this.version = args.version;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field version is unset!');
      }
      if (args.description !== undefined && args.description !== null) {
        this.description = args.description;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.version = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.description = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ServiceInfo');
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 1);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.version !== null && this.version !== undefined) {
      output.writeFieldBegin('version', Thrift.Type.STRING, 2);
      output.writeString(this.version);
      output.writeFieldEnd();
    }
    if (this.description !== null && this.description !== undefined) {
      output.writeFieldBegin('description', Thrift.Type.STRING, 3);
      output.writeString(this.description);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
