//
// Autogenerated by Thrift Compiler (0.18.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');


const ttypes = module.exports = {};
const TextSpan = module.exports.TextSpan = class {
  constructor(args) {
    this.start = null;
    this.ending = null;
    if (args) {
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field start is unset!');
      }
      if (args.ending !== undefined && args.ending !== null) {
        this.ending = args.ending;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ending is unset!');
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.start = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.ending = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TextSpan');
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I32, 1);
      output.writeI32(this.start);
      output.writeFieldEnd();
    }
    if (this.ending !== null && this.ending !== undefined) {
      output.writeFieldBegin('ending', Thrift.Type.I32, 2);
      output.writeI32(this.ending);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AudioSpan = module.exports.AudioSpan = class {
  constructor(args) {
    this.start = null;
    this.ending = null;
    if (args) {
      if (args.start !== undefined && args.start !== null) {
        this.start = args.start;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field start is unset!');
      }
      if (args.ending !== undefined && args.ending !== null) {
        this.ending = args.ending;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ending is unset!');
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.ending = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AudioSpan');
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 1);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.ending !== null && this.ending !== undefined) {
      output.writeFieldBegin('ending', Thrift.Type.I64, 2);
      output.writeI64(this.ending);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
