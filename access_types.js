//
// Autogenerated by Thrift Compiler (0.18.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');

const communication_ttypes = require('./communication_types');
const services_ttypes = require('./services_types');


const ttypes = module.exports = {};
const FetchResult = module.exports.FetchResult = class {
  constructor(args) {
    this.communications = null;
    if (args) {
      if (args.communications !== undefined && args.communications !== null) {
        this.communications = Thrift.copyList(args.communications, [communication_ttypes.Communication]);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field communications is unset!');
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.communications = [];
          const _rtmp31 = input.readListBegin();
          const _size0 = _rtmp31.size || 0;
          for (let _i2 = 0; _i2 < _size0; ++_i2) {
            let elem3 = null;
            elem3 = new communication_ttypes.Communication();
            elem3.read(input);
            this.communications.push(elem3);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('FetchResult');
    if (this.communications !== null && this.communications !== undefined) {
      output.writeFieldBegin('communications', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.communications.length);
      for (let iter4 in this.communications) {
        if (this.communications.hasOwnProperty(iter4)) {
          iter4 = this.communications[iter4];
          iter4.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const FetchRequest = module.exports.FetchRequest = class {
  constructor(args) {
    this.communicationIds = null;
    this.auths = null;
    if (args) {
      if (args.communicationIds !== undefined && args.communicationIds !== null) {
        this.communicationIds = Thrift.copyList(args.communicationIds, [null]);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field communicationIds is unset!');
      }
      if (args.auths !== undefined && args.auths !== null) {
        this.auths = args.auths;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.communicationIds = [];
          const _rtmp36 = input.readListBegin();
          const _size5 = _rtmp36.size || 0;
          for (let _i7 = 0; _i7 < _size5; ++_i7) {
            let elem8 = null;
            elem8 = input.readString();
            this.communicationIds.push(elem8);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.auths = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('FetchRequest');
    if (this.communicationIds !== null && this.communicationIds !== undefined) {
      output.writeFieldBegin('communicationIds', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.communicationIds.length);
      for (let iter9 in this.communicationIds) {
        if (this.communicationIds.hasOwnProperty(iter9)) {
          iter9 = this.communicationIds[iter9];
          output.writeString(iter9);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.auths !== null && this.auths !== undefined) {
      output.writeFieldBegin('auths', Thrift.Type.STRING, 2);
      output.writeString(this.auths);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
