//
// Autogenerated by Thrift Compiler (0.18.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');

const communication_ttypes = require('./communication_types');
const services_ttypes = require('./services_types');
const structure_ttypes = require('./structure_types');
const uuid_ttypes = require('./uuid_types');
const metadata_ttypes = require('./metadata_types');
const entities_ttypes = require('./entities_types');


const Service = require('./Service');
const ServiceClient = Service.Client;
const ServiceProcessor = Service.Processor;
const ttypes = require('./search_types');
//HELPER FUNCTIONS AND STRUCTURES

const SearchProxyService_search_args = class {
  constructor(args) {
    this.query = null;
    this.provider = null;
    if (args) {
      if (args.query !== undefined && args.query !== null) {
        this.query = new ttypes.SearchQuery(args.query);
      }
      if (args.provider !== undefined && args.provider !== null) {
        this.provider = args.provider;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.query = new ttypes.SearchQuery();
          this.query.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.provider = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SearchProxyService_search_args');
    if (this.query !== null && this.query !== undefined) {
      output.writeFieldBegin('query', Thrift.Type.STRUCT, 1);
      this.query.write(output);
      output.writeFieldEnd();
    }
    if (this.provider !== null && this.provider !== undefined) {
      output.writeFieldBegin('provider', Thrift.Type.STRING, 2);
      output.writeString(this.provider);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SearchProxyService_search_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    if (args instanceof services_ttypes.ServicesException) {
        this.ex = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.SearchResult(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.SearchResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new services_ttypes.ServicesException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SearchProxyService_search_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SearchProxyService_getProviders_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SearchProxyService_getProviders_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SearchProxyService_getProviders_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    if (args instanceof services_ttypes.ServicesException) {
        this.ex = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp331 = input.readListBegin();
          const _size30 = _rtmp331.size || 0;
          for (let _i32 = 0; _i32 < _size30; ++_i32) {
            let elem33 = null;
            elem33 = input.readString();
            this.success.push(elem33);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new services_ttypes.ServicesException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SearchProxyService_getProviders_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRING, this.success.length);
      for (let iter34 in this.success) {
        if (this.success.hasOwnProperty(iter34)) {
          iter34 = this.success[iter34];
          output.writeString(iter34);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SearchProxyService_getCapabilities_args = class {
  constructor(args) {
    this.provider = null;
    if (args) {
      if (args.provider !== undefined && args.provider !== null) {
        this.provider = args.provider;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.provider = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SearchProxyService_getCapabilities_args');
    if (this.provider !== null && this.provider !== undefined) {
      output.writeFieldBegin('provider', Thrift.Type.STRING, 1);
      output.writeString(this.provider);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SearchProxyService_getCapabilities_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    if (args instanceof services_ttypes.ServicesException) {
        this.ex = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [ttypes.SearchCapability]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp336 = input.readListBegin();
          const _size35 = _rtmp336.size || 0;
          for (let _i37 = 0; _i37 < _size35; ++_i37) {
            let elem38 = null;
            elem38 = new ttypes.SearchCapability();
            elem38.read(input);
            this.success.push(elem38);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new services_ttypes.ServicesException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SearchProxyService_getCapabilities_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter39 in this.success) {
        if (this.success.hasOwnProperty(iter39)) {
          iter39 = this.success[iter39];
          iter39.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SearchProxyService_getCorpora_args = class {
  constructor(args) {
    this.provider = null;
    if (args) {
      if (args.provider !== undefined && args.provider !== null) {
        this.provider = args.provider;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.provider = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SearchProxyService_getCorpora_args');
    if (this.provider !== null && this.provider !== undefined) {
      output.writeFieldBegin('provider', Thrift.Type.STRING, 1);
      output.writeString(this.provider);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SearchProxyService_getCorpora_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    if (args instanceof services_ttypes.ServicesException) {
        this.ex = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp341 = input.readListBegin();
          const _size40 = _rtmp341.size || 0;
          for (let _i42 = 0; _i42 < _size40; ++_i42) {
            let elem43 = null;
            elem43 = input.readString();
            this.success.push(elem43);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new services_ttypes.ServicesException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SearchProxyService_getCorpora_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRING, this.success.length);
      for (let iter44 in this.success) {
        if (this.success.hasOwnProperty(iter44)) {
          iter44 = this.success[iter44];
          output.writeString(iter44);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SearchProxyServiceClient = exports.Client = class SearchProxyServiceClient extends ServiceClient {
  constructor(output, pClass) {
    super(output, pClass);
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
  }
  seqid () { return this._seqid; }
  new_seqid () { return this._seqid += 1; }

  search (query, provider) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_search(query, provider);
    });
  }

  send_search (query, provider) {
    const output = new this.pClass(this.output);
    const params = {
      query: query,
      provider: provider
    };
    const args = new SearchProxyService_search_args(params);
    try {
      output.writeMessageBegin('search', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_search (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new SearchProxyService_search_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('search failed: unknown result');
  }

  getProviders () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getProviders();
    });
  }

  send_getProviders () {
    const output = new this.pClass(this.output);
    const args = new SearchProxyService_getProviders_args();
    try {
      output.writeMessageBegin('getProviders', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getProviders (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new SearchProxyService_getProviders_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getProviders failed: unknown result');
  }

  getCapabilities (provider) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getCapabilities(provider);
    });
  }

  send_getCapabilities (provider) {
    const output = new this.pClass(this.output);
    const params = {
      provider: provider
    };
    const args = new SearchProxyService_getCapabilities_args(params);
    try {
      output.writeMessageBegin('getCapabilities', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getCapabilities (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new SearchProxyService_getCapabilities_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCapabilities failed: unknown result');
  }

  getCorpora (provider) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getCorpora(provider);
    });
  }

  send_getCorpora (provider) {
    const output = new this.pClass(this.output);
    const params = {
      provider: provider
    };
    const args = new SearchProxyService_getCorpora_args(params);
    try {
      output.writeMessageBegin('getCorpora', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getCorpora (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new SearchProxyService_getCorpora_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCorpora failed: unknown result');
  }
};
const SearchProxyServiceProcessor = exports.Processor = class SearchProxyServiceProcessor extends ServiceProcessor {
  constructor(handler) {
    super(handler);
    this._handler = handler;
  }
  process (input, output) {
    const r = input.readMessageBegin();
    if (this['process_' + r.fname]) {
      return this['process_' + r.fname].call(this, r.rseqid, input, output);
    } else {
      input.skip(Thrift.Type.STRUCT);
      input.readMessageEnd();
      const x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
      output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
      x.write(output);
      output.writeMessageEnd();
      output.flush();
    }
  }
  process_search (seqid, input, output) {
    const args = new SearchProxyService_search_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.search.length === 2) {
      new Promise((resolve) => resolve(this._handler.search.bind(this._handler)(
        args.query,
        args.provider
      ))).then(result => {
        const result_obj = new SearchProxyService_search_result({success: result});
        output.writeMessageBegin("search", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof services_ttypes.ServicesException) {
          result = new SearchProxyService_search_result(err);
          output.writeMessageBegin("search", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("search", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.search(args.query, args.provider, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof services_ttypes.ServicesException) {
          result_obj = new SearchProxyService_search_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("search", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("search", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getProviders (seqid, input, output) {
    const args = new SearchProxyService_getProviders_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getProviders.length === 0) {
      new Promise((resolve) => resolve(this._handler.getProviders.bind(this._handler)(
      ))).then(result => {
        const result_obj = new SearchProxyService_getProviders_result({success: result});
        output.writeMessageBegin("getProviders", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof services_ttypes.ServicesException) {
          result = new SearchProxyService_getProviders_result(err);
          output.writeMessageBegin("getProviders", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProviders", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getProviders((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof services_ttypes.ServicesException) {
          result_obj = new SearchProxyService_getProviders_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getProviders", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProviders", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getCapabilities (seqid, input, output) {
    const args = new SearchProxyService_getCapabilities_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getCapabilities.length === 1) {
      new Promise((resolve) => resolve(this._handler.getCapabilities.bind(this._handler)(
        args.provider
      ))).then(result => {
        const result_obj = new SearchProxyService_getCapabilities_result({success: result});
        output.writeMessageBegin("getCapabilities", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof services_ttypes.ServicesException) {
          result = new SearchProxyService_getCapabilities_result(err);
          output.writeMessageBegin("getCapabilities", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCapabilities", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getCapabilities(args.provider, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof services_ttypes.ServicesException) {
          result_obj = new SearchProxyService_getCapabilities_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getCapabilities", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCapabilities", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getCorpora (seqid, input, output) {
    const args = new SearchProxyService_getCorpora_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getCorpora.length === 1) {
      new Promise((resolve) => resolve(this._handler.getCorpora.bind(this._handler)(
        args.provider
      ))).then(result => {
        const result_obj = new SearchProxyService_getCorpora_result({success: result});
        output.writeMessageBegin("getCorpora", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof services_ttypes.ServicesException) {
          result = new SearchProxyService_getCorpora_result(err);
          output.writeMessageBegin("getCorpora", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCorpora", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getCorpora(args.provider, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof services_ttypes.ServicesException) {
          result_obj = new SearchProxyService_getCorpora_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getCorpora", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCorpora", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
};
