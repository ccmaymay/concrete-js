//
// Autogenerated by Thrift Compiler (0.18.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');

const uuid_ttypes = require('./uuid_types');
const twitter_ttypes = require('./twitter_types');
const email_ttypes = require('./email_types');
const nitf_ttypes = require('./nitf_types');


const ttypes = module.exports = {};
const TheoryDependencies = module.exports.TheoryDependencies = class {
  constructor(args) {
    this.sectionTheoryList = null;
    this.sentenceTheoryList = null;
    this.tokenizationTheoryList = null;
    this.posTagTheoryList = null;
    this.nerTagTheoryList = null;
    this.lemmaTheoryList = null;
    this.langIdTheoryList = null;
    this.parseTheoryList = null;
    this.dependencyParseTheoryList = null;
    this.tokenAnnotationTheoryList = null;
    this.entityMentionSetTheoryList = null;
    this.entitySetTheoryList = null;
    this.situationMentionSetTheoryList = null;
    this.situationSetTheoryList = null;
    this.communicationsList = null;
    if (args) {
      if (args.sectionTheoryList !== undefined && args.sectionTheoryList !== null) {
        this.sectionTheoryList = Thrift.copyList(args.sectionTheoryList, [uuid_ttypes.UUID]);
      }
      if (args.sentenceTheoryList !== undefined && args.sentenceTheoryList !== null) {
        this.sentenceTheoryList = Thrift.copyList(args.sentenceTheoryList, [uuid_ttypes.UUID]);
      }
      if (args.tokenizationTheoryList !== undefined && args.tokenizationTheoryList !== null) {
        this.tokenizationTheoryList = Thrift.copyList(args.tokenizationTheoryList, [uuid_ttypes.UUID]);
      }
      if (args.posTagTheoryList !== undefined && args.posTagTheoryList !== null) {
        this.posTagTheoryList = Thrift.copyList(args.posTagTheoryList, [uuid_ttypes.UUID]);
      }
      if (args.nerTagTheoryList !== undefined && args.nerTagTheoryList !== null) {
        this.nerTagTheoryList = Thrift.copyList(args.nerTagTheoryList, [uuid_ttypes.UUID]);
      }
      if (args.lemmaTheoryList !== undefined && args.lemmaTheoryList !== null) {
        this.lemmaTheoryList = Thrift.copyList(args.lemmaTheoryList, [uuid_ttypes.UUID]);
      }
      if (args.langIdTheoryList !== undefined && args.langIdTheoryList !== null) {
        this.langIdTheoryList = Thrift.copyList(args.langIdTheoryList, [uuid_ttypes.UUID]);
      }
      if (args.parseTheoryList !== undefined && args.parseTheoryList !== null) {
        this.parseTheoryList = Thrift.copyList(args.parseTheoryList, [uuid_ttypes.UUID]);
      }
      if (args.dependencyParseTheoryList !== undefined && args.dependencyParseTheoryList !== null) {
        this.dependencyParseTheoryList = Thrift.copyList(args.dependencyParseTheoryList, [uuid_ttypes.UUID]);
      }
      if (args.tokenAnnotationTheoryList !== undefined && args.tokenAnnotationTheoryList !== null) {
        this.tokenAnnotationTheoryList = Thrift.copyList(args.tokenAnnotationTheoryList, [uuid_ttypes.UUID]);
      }
      if (args.entityMentionSetTheoryList !== undefined && args.entityMentionSetTheoryList !== null) {
        this.entityMentionSetTheoryList = Thrift.copyList(args.entityMentionSetTheoryList, [uuid_ttypes.UUID]);
      }
      if (args.entitySetTheoryList !== undefined && args.entitySetTheoryList !== null) {
        this.entitySetTheoryList = Thrift.copyList(args.entitySetTheoryList, [uuid_ttypes.UUID]);
      }
      if (args.situationMentionSetTheoryList !== undefined && args.situationMentionSetTheoryList !== null) {
        this.situationMentionSetTheoryList = Thrift.copyList(args.situationMentionSetTheoryList, [uuid_ttypes.UUID]);
      }
      if (args.situationSetTheoryList !== undefined && args.situationSetTheoryList !== null) {
        this.situationSetTheoryList = Thrift.copyList(args.situationSetTheoryList, [uuid_ttypes.UUID]);
      }
      if (args.communicationsList !== undefined && args.communicationsList !== null) {
        this.communicationsList = Thrift.copyList(args.communicationsList, [uuid_ttypes.UUID]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.sectionTheoryList = [];
          const _rtmp31 = input.readListBegin();
          const _size0 = _rtmp31.size || 0;
          for (let _i2 = 0; _i2 < _size0; ++_i2) {
            let elem3 = null;
            elem3 = new uuid_ttypes.UUID();
            elem3.read(input);
            this.sectionTheoryList.push(elem3);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.sentenceTheoryList = [];
          const _rtmp35 = input.readListBegin();
          const _size4 = _rtmp35.size || 0;
          for (let _i6 = 0; _i6 < _size4; ++_i6) {
            let elem7 = null;
            elem7 = new uuid_ttypes.UUID();
            elem7.read(input);
            this.sentenceTheoryList.push(elem7);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.tokenizationTheoryList = [];
          const _rtmp39 = input.readListBegin();
          const _size8 = _rtmp39.size || 0;
          for (let _i10 = 0; _i10 < _size8; ++_i10) {
            let elem11 = null;
            elem11 = new uuid_ttypes.UUID();
            elem11.read(input);
            this.tokenizationTheoryList.push(elem11);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.posTagTheoryList = [];
          const _rtmp313 = input.readListBegin();
          const _size12 = _rtmp313.size || 0;
          for (let _i14 = 0; _i14 < _size12; ++_i14) {
            let elem15 = null;
            elem15 = new uuid_ttypes.UUID();
            elem15.read(input);
            this.posTagTheoryList.push(elem15);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.LIST) {
          this.nerTagTheoryList = [];
          const _rtmp317 = input.readListBegin();
          const _size16 = _rtmp317.size || 0;
          for (let _i18 = 0; _i18 < _size16; ++_i18) {
            let elem19 = null;
            elem19 = new uuid_ttypes.UUID();
            elem19.read(input);
            this.nerTagTheoryList.push(elem19);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.LIST) {
          this.lemmaTheoryList = [];
          const _rtmp321 = input.readListBegin();
          const _size20 = _rtmp321.size || 0;
          for (let _i22 = 0; _i22 < _size20; ++_i22) {
            let elem23 = null;
            elem23 = new uuid_ttypes.UUID();
            elem23.read(input);
            this.lemmaTheoryList.push(elem23);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.LIST) {
          this.langIdTheoryList = [];
          const _rtmp325 = input.readListBegin();
          const _size24 = _rtmp325.size || 0;
          for (let _i26 = 0; _i26 < _size24; ++_i26) {
            let elem27 = null;
            elem27 = new uuid_ttypes.UUID();
            elem27.read(input);
            this.langIdTheoryList.push(elem27);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.LIST) {
          this.parseTheoryList = [];
          const _rtmp329 = input.readListBegin();
          const _size28 = _rtmp329.size || 0;
          for (let _i30 = 0; _i30 < _size28; ++_i30) {
            let elem31 = null;
            elem31 = new uuid_ttypes.UUID();
            elem31.read(input);
            this.parseTheoryList.push(elem31);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.LIST) {
          this.dependencyParseTheoryList = [];
          const _rtmp333 = input.readListBegin();
          const _size32 = _rtmp333.size || 0;
          for (let _i34 = 0; _i34 < _size32; ++_i34) {
            let elem35 = null;
            elem35 = new uuid_ttypes.UUID();
            elem35.read(input);
            this.dependencyParseTheoryList.push(elem35);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.LIST) {
          this.tokenAnnotationTheoryList = [];
          const _rtmp337 = input.readListBegin();
          const _size36 = _rtmp337.size || 0;
          for (let _i38 = 0; _i38 < _size36; ++_i38) {
            let elem39 = null;
            elem39 = new uuid_ttypes.UUID();
            elem39.read(input);
            this.tokenAnnotationTheoryList.push(elem39);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.LIST) {
          this.entityMentionSetTheoryList = [];
          const _rtmp341 = input.readListBegin();
          const _size40 = _rtmp341.size || 0;
          for (let _i42 = 0; _i42 < _size40; ++_i42) {
            let elem43 = null;
            elem43 = new uuid_ttypes.UUID();
            elem43.read(input);
            this.entityMentionSetTheoryList.push(elem43);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.LIST) {
          this.entitySetTheoryList = [];
          const _rtmp345 = input.readListBegin();
          const _size44 = _rtmp345.size || 0;
          for (let _i46 = 0; _i46 < _size44; ++_i46) {
            let elem47 = null;
            elem47 = new uuid_ttypes.UUID();
            elem47.read(input);
            this.entitySetTheoryList.push(elem47);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.LIST) {
          this.situationMentionSetTheoryList = [];
          const _rtmp349 = input.readListBegin();
          const _size48 = _rtmp349.size || 0;
          for (let _i50 = 0; _i50 < _size48; ++_i50) {
            let elem51 = null;
            elem51 = new uuid_ttypes.UUID();
            elem51.read(input);
            this.situationMentionSetTheoryList.push(elem51);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.LIST) {
          this.situationSetTheoryList = [];
          const _rtmp353 = input.readListBegin();
          const _size52 = _rtmp353.size || 0;
          for (let _i54 = 0; _i54 < _size52; ++_i54) {
            let elem55 = null;
            elem55 = new uuid_ttypes.UUID();
            elem55.read(input);
            this.situationSetTheoryList.push(elem55);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.LIST) {
          this.communicationsList = [];
          const _rtmp357 = input.readListBegin();
          const _size56 = _rtmp357.size || 0;
          for (let _i58 = 0; _i58 < _size56; ++_i58) {
            let elem59 = null;
            elem59 = new uuid_ttypes.UUID();
            elem59.read(input);
            this.communicationsList.push(elem59);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TheoryDependencies');
    if (this.sectionTheoryList !== null && this.sectionTheoryList !== undefined) {
      output.writeFieldBegin('sectionTheoryList', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.sectionTheoryList.length);
      for (let iter60 in this.sectionTheoryList) {
        if (this.sectionTheoryList.hasOwnProperty(iter60)) {
          iter60 = this.sectionTheoryList[iter60];
          iter60.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.sentenceTheoryList !== null && this.sentenceTheoryList !== undefined) {
      output.writeFieldBegin('sentenceTheoryList', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.sentenceTheoryList.length);
      for (let iter61 in this.sentenceTheoryList) {
        if (this.sentenceTheoryList.hasOwnProperty(iter61)) {
          iter61 = this.sentenceTheoryList[iter61];
          iter61.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.tokenizationTheoryList !== null && this.tokenizationTheoryList !== undefined) {
      output.writeFieldBegin('tokenizationTheoryList', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.tokenizationTheoryList.length);
      for (let iter62 in this.tokenizationTheoryList) {
        if (this.tokenizationTheoryList.hasOwnProperty(iter62)) {
          iter62 = this.tokenizationTheoryList[iter62];
          iter62.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.posTagTheoryList !== null && this.posTagTheoryList !== undefined) {
      output.writeFieldBegin('posTagTheoryList', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRUCT, this.posTagTheoryList.length);
      for (let iter63 in this.posTagTheoryList) {
        if (this.posTagTheoryList.hasOwnProperty(iter63)) {
          iter63 = this.posTagTheoryList[iter63];
          iter63.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.nerTagTheoryList !== null && this.nerTagTheoryList !== undefined) {
      output.writeFieldBegin('nerTagTheoryList', Thrift.Type.LIST, 5);
      output.writeListBegin(Thrift.Type.STRUCT, this.nerTagTheoryList.length);
      for (let iter64 in this.nerTagTheoryList) {
        if (this.nerTagTheoryList.hasOwnProperty(iter64)) {
          iter64 = this.nerTagTheoryList[iter64];
          iter64.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.lemmaTheoryList !== null && this.lemmaTheoryList !== undefined) {
      output.writeFieldBegin('lemmaTheoryList', Thrift.Type.LIST, 6);
      output.writeListBegin(Thrift.Type.STRUCT, this.lemmaTheoryList.length);
      for (let iter65 in this.lemmaTheoryList) {
        if (this.lemmaTheoryList.hasOwnProperty(iter65)) {
          iter65 = this.lemmaTheoryList[iter65];
          iter65.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.langIdTheoryList !== null && this.langIdTheoryList !== undefined) {
      output.writeFieldBegin('langIdTheoryList', Thrift.Type.LIST, 7);
      output.writeListBegin(Thrift.Type.STRUCT, this.langIdTheoryList.length);
      for (let iter66 in this.langIdTheoryList) {
        if (this.langIdTheoryList.hasOwnProperty(iter66)) {
          iter66 = this.langIdTheoryList[iter66];
          iter66.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.parseTheoryList !== null && this.parseTheoryList !== undefined) {
      output.writeFieldBegin('parseTheoryList', Thrift.Type.LIST, 8);
      output.writeListBegin(Thrift.Type.STRUCT, this.parseTheoryList.length);
      for (let iter67 in this.parseTheoryList) {
        if (this.parseTheoryList.hasOwnProperty(iter67)) {
          iter67 = this.parseTheoryList[iter67];
          iter67.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.dependencyParseTheoryList !== null && this.dependencyParseTheoryList !== undefined) {
      output.writeFieldBegin('dependencyParseTheoryList', Thrift.Type.LIST, 9);
      output.writeListBegin(Thrift.Type.STRUCT, this.dependencyParseTheoryList.length);
      for (let iter68 in this.dependencyParseTheoryList) {
        if (this.dependencyParseTheoryList.hasOwnProperty(iter68)) {
          iter68 = this.dependencyParseTheoryList[iter68];
          iter68.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.tokenAnnotationTheoryList !== null && this.tokenAnnotationTheoryList !== undefined) {
      output.writeFieldBegin('tokenAnnotationTheoryList', Thrift.Type.LIST, 10);
      output.writeListBegin(Thrift.Type.STRUCT, this.tokenAnnotationTheoryList.length);
      for (let iter69 in this.tokenAnnotationTheoryList) {
        if (this.tokenAnnotationTheoryList.hasOwnProperty(iter69)) {
          iter69 = this.tokenAnnotationTheoryList[iter69];
          iter69.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.entityMentionSetTheoryList !== null && this.entityMentionSetTheoryList !== undefined) {
      output.writeFieldBegin('entityMentionSetTheoryList', Thrift.Type.LIST, 11);
      output.writeListBegin(Thrift.Type.STRUCT, this.entityMentionSetTheoryList.length);
      for (let iter70 in this.entityMentionSetTheoryList) {
        if (this.entityMentionSetTheoryList.hasOwnProperty(iter70)) {
          iter70 = this.entityMentionSetTheoryList[iter70];
          iter70.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.entitySetTheoryList !== null && this.entitySetTheoryList !== undefined) {
      output.writeFieldBegin('entitySetTheoryList', Thrift.Type.LIST, 12);
      output.writeListBegin(Thrift.Type.STRUCT, this.entitySetTheoryList.length);
      for (let iter71 in this.entitySetTheoryList) {
        if (this.entitySetTheoryList.hasOwnProperty(iter71)) {
          iter71 = this.entitySetTheoryList[iter71];
          iter71.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.situationMentionSetTheoryList !== null && this.situationMentionSetTheoryList !== undefined) {
      output.writeFieldBegin('situationMentionSetTheoryList', Thrift.Type.LIST, 13);
      output.writeListBegin(Thrift.Type.STRUCT, this.situationMentionSetTheoryList.length);
      for (let iter72 in this.situationMentionSetTheoryList) {
        if (this.situationMentionSetTheoryList.hasOwnProperty(iter72)) {
          iter72 = this.situationMentionSetTheoryList[iter72];
          iter72.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.situationSetTheoryList !== null && this.situationSetTheoryList !== undefined) {
      output.writeFieldBegin('situationSetTheoryList', Thrift.Type.LIST, 14);
      output.writeListBegin(Thrift.Type.STRUCT, this.situationSetTheoryList.length);
      for (let iter73 in this.situationSetTheoryList) {
        if (this.situationSetTheoryList.hasOwnProperty(iter73)) {
          iter73 = this.situationSetTheoryList[iter73];
          iter73.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.communicationsList !== null && this.communicationsList !== undefined) {
      output.writeFieldBegin('communicationsList', Thrift.Type.LIST, 15);
      output.writeListBegin(Thrift.Type.STRUCT, this.communicationsList.length);
      for (let iter74 in this.communicationsList) {
        if (this.communicationsList.hasOwnProperty(iter74)) {
          iter74 = this.communicationsList[iter74];
          iter74.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Digest = module.exports.Digest = class {
  constructor(args) {
    this.bytesValue = null;
    this.int64Value = null;
    this.doubleValue = null;
    this.stringValue = null;
    this.int64List = null;
    this.doubleList = null;
    this.stringList = null;
    if (args) {
      if (args.bytesValue !== undefined && args.bytesValue !== null) {
        this.bytesValue = args.bytesValue;
      }
      if (args.int64Value !== undefined && args.int64Value !== null) {
        this.int64Value = args.int64Value;
      }
      if (args.doubleValue !== undefined && args.doubleValue !== null) {
        this.doubleValue = args.doubleValue;
      }
      if (args.stringValue !== undefined && args.stringValue !== null) {
        this.stringValue = args.stringValue;
      }
      if (args.int64List !== undefined && args.int64List !== null) {
        this.int64List = Thrift.copyList(args.int64List, [null]);
      }
      if (args.doubleList !== undefined && args.doubleList !== null) {
        this.doubleList = Thrift.copyList(args.doubleList, [null]);
      }
      if (args.stringList !== undefined && args.stringList !== null) {
        this.stringList = Thrift.copyList(args.stringList, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.bytesValue = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.int64Value = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.DOUBLE) {
          this.doubleValue = input.readDouble();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.stringValue = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.LIST) {
          this.int64List = [];
          const _rtmp376 = input.readListBegin();
          const _size75 = _rtmp376.size || 0;
          for (let _i77 = 0; _i77 < _size75; ++_i77) {
            let elem78 = null;
            elem78 = input.readI64();
            this.int64List.push(elem78);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.LIST) {
          this.doubleList = [];
          const _rtmp380 = input.readListBegin();
          const _size79 = _rtmp380.size || 0;
          for (let _i81 = 0; _i81 < _size79; ++_i81) {
            let elem82 = null;
            elem82 = input.readDouble();
            this.doubleList.push(elem82);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.LIST) {
          this.stringList = [];
          const _rtmp384 = input.readListBegin();
          const _size83 = _rtmp384.size || 0;
          for (let _i85 = 0; _i85 < _size83; ++_i85) {
            let elem86 = null;
            elem86 = input.readString();
            this.stringList.push(elem86);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Digest');
    if (this.bytesValue !== null && this.bytesValue !== undefined) {
      output.writeFieldBegin('bytesValue', Thrift.Type.STRING, 1);
      output.writeBinary(this.bytesValue);
      output.writeFieldEnd();
    }
    if (this.int64Value !== null && this.int64Value !== undefined) {
      output.writeFieldBegin('int64Value', Thrift.Type.I64, 2);
      output.writeI64(this.int64Value);
      output.writeFieldEnd();
    }
    if (this.doubleValue !== null && this.doubleValue !== undefined) {
      output.writeFieldBegin('doubleValue', Thrift.Type.DOUBLE, 3);
      output.writeDouble(this.doubleValue);
      output.writeFieldEnd();
    }
    if (this.stringValue !== null && this.stringValue !== undefined) {
      output.writeFieldBegin('stringValue', Thrift.Type.STRING, 4);
      output.writeString(this.stringValue);
      output.writeFieldEnd();
    }
    if (this.int64List !== null && this.int64List !== undefined) {
      output.writeFieldBegin('int64List', Thrift.Type.LIST, 5);
      output.writeListBegin(Thrift.Type.I64, this.int64List.length);
      for (let iter87 in this.int64List) {
        if (this.int64List.hasOwnProperty(iter87)) {
          iter87 = this.int64List[iter87];
          output.writeI64(iter87);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.doubleList !== null && this.doubleList !== undefined) {
      output.writeFieldBegin('doubleList', Thrift.Type.LIST, 6);
      output.writeListBegin(Thrift.Type.DOUBLE, this.doubleList.length);
      for (let iter88 in this.doubleList) {
        if (this.doubleList.hasOwnProperty(iter88)) {
          iter88 = this.doubleList[iter88];
          output.writeDouble(iter88);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.stringList !== null && this.stringList !== undefined) {
      output.writeFieldBegin('stringList', Thrift.Type.LIST, 7);
      output.writeListBegin(Thrift.Type.STRING, this.stringList.length);
      for (let iter89 in this.stringList) {
        if (this.stringList.hasOwnProperty(iter89)) {
          iter89 = this.stringList[iter89];
          output.writeString(iter89);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AnnotationMetadata = module.exports.AnnotationMetadata = class {
  constructor(args) {
    this.tool = null;
    this.timestamp = null;
    this.digest = null;
    this.dependencies = null;
    this.kBest = 1;
    if (args) {
      if (args.tool !== undefined && args.tool !== null) {
        this.tool = args.tool;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tool is unset!');
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
      }
      if (args.digest !== undefined && args.digest !== null) {
        this.digest = new ttypes.Digest(args.digest);
      }
      if (args.dependencies !== undefined && args.dependencies !== null) {
        this.dependencies = new ttypes.TheoryDependencies(args.dependencies);
      }
      if (args.kBest !== undefined && args.kBest !== null) {
        this.kBest = args.kBest;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field kBest is unset!');
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.tool = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.digest = new ttypes.Digest();
          this.digest.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.dependencies = new ttypes.TheoryDependencies();
          this.dependencies.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I32) {
          this.kBest = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AnnotationMetadata');
    if (this.tool !== null && this.tool !== undefined) {
      output.writeFieldBegin('tool', Thrift.Type.STRING, 1);
      output.writeString(this.tool);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.digest !== null && this.digest !== undefined) {
      output.writeFieldBegin('digest', Thrift.Type.STRUCT, 4);
      this.digest.write(output);
      output.writeFieldEnd();
    }
    if (this.dependencies !== null && this.dependencies !== undefined) {
      output.writeFieldBegin('dependencies', Thrift.Type.STRUCT, 5);
      this.dependencies.write(output);
      output.writeFieldEnd();
    }
    if (this.kBest !== null && this.kBest !== undefined) {
      output.writeFieldBegin('kBest', Thrift.Type.I32, 6);
      output.writeI32(this.kBest);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CommunicationMetadata = module.exports.CommunicationMetadata = class {
  constructor(args) {
    this.tweetInfo = null;
    this.emailInfo = null;
    this.nitfInfo = null;
    if (args) {
      if (args.tweetInfo !== undefined && args.tweetInfo !== null) {
        this.tweetInfo = new twitter_ttypes.TweetInfo(args.tweetInfo);
      }
      if (args.emailInfo !== undefined && args.emailInfo !== null) {
        this.emailInfo = new email_ttypes.EmailCommunicationInfo(args.emailInfo);
      }
      if (args.nitfInfo !== undefined && args.nitfInfo !== null) {
        this.nitfInfo = new nitf_ttypes.NITFInfo(args.nitfInfo);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.tweetInfo = new twitter_ttypes.TweetInfo();
          this.tweetInfo.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.emailInfo = new email_ttypes.EmailCommunicationInfo();
          this.emailInfo.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.nitfInfo = new nitf_ttypes.NITFInfo();
          this.nitfInfo.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CommunicationMetadata');
    if (this.tweetInfo !== null && this.tweetInfo !== undefined) {
      output.writeFieldBegin('tweetInfo', Thrift.Type.STRUCT, 1);
      this.tweetInfo.write(output);
      output.writeFieldEnd();
    }
    if (this.emailInfo !== null && this.emailInfo !== undefined) {
      output.writeFieldBegin('emailInfo', Thrift.Type.STRUCT, 2);
      this.emailInfo.write(output);
      output.writeFieldEnd();
    }
    if (this.nitfInfo !== null && this.nitfInfo !== undefined) {
      output.writeFieldBegin('nitfInfo', Thrift.Type.STRUCT, 3);
      this.nitfInfo.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
