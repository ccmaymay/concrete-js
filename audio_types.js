//
// Autogenerated by Thrift Compiler (0.18.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');


const ttypes = module.exports = {};
const Sound = module.exports.Sound = class {
  constructor(args) {
    this.wav = null;
    this.mp3 = null;
    this.sph = null;
    this.path = null;
    if (args) {
      if (args.wav !== undefined && args.wav !== null) {
        this.wav = args.wav;
      }
      if (args.mp3 !== undefined && args.mp3 !== null) {
        this.mp3 = args.mp3;
      }
      if (args.sph !== undefined && args.sph !== null) {
        this.sph = args.sph;
      }
      if (args.path !== undefined && args.path !== null) {
        this.path = args.path;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.wav = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.mp3 = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.sph = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.path = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Sound');
    if (this.wav !== null && this.wav !== undefined) {
      output.writeFieldBegin('wav', Thrift.Type.STRING, 1);
      output.writeBinary(this.wav);
      output.writeFieldEnd();
    }
    if (this.mp3 !== null && this.mp3 !== undefined) {
      output.writeFieldBegin('mp3', Thrift.Type.STRING, 2);
      output.writeBinary(this.mp3);
      output.writeFieldEnd();
    }
    if (this.sph !== null && this.sph !== undefined) {
      output.writeFieldBegin('sph', Thrift.Type.STRING, 3);
      output.writeBinary(this.sph);
      output.writeFieldEnd();
    }
    if (this.path !== null && this.path !== undefined) {
      output.writeFieldBegin('path', Thrift.Type.STRING, 4);
      output.writeString(this.path);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
