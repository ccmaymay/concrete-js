//
// Autogenerated by Thrift Compiler (0.18.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');

const communication_ttypes = require('./communication_types');
const services_ttypes = require('./services_types');
const structure_ttypes = require('./structure_types');
const uuid_ttypes = require('./uuid_types');


const ttypes = module.exports = {};
ttypes.SummarySourceType = {
  'DOCUMENT' : 0,
  'TOKENIZATION' : 1,
  'ENTITY' : 2
};
const SummarizationRequest = module.exports.SummarizationRequest = class {
  constructor(args) {
    this.queryTerms = null;
    this.maximumTokens = null;
    this.maximumCharacters = null;
    this.sourceType = null;
    this.sourceIds = null;
    this.sourceCommunication = null;
    if (args) {
      if (args.queryTerms !== undefined && args.queryTerms !== null) {
        this.queryTerms = Thrift.copyList(args.queryTerms, [null]);
      }
      if (args.maximumTokens !== undefined && args.maximumTokens !== null) {
        this.maximumTokens = args.maximumTokens;
      }
      if (args.maximumCharacters !== undefined && args.maximumCharacters !== null) {
        this.maximumCharacters = args.maximumCharacters;
      }
      if (args.sourceType !== undefined && args.sourceType !== null) {
        this.sourceType = args.sourceType;
      }
      if (args.sourceIds !== undefined && args.sourceIds !== null) {
        this.sourceIds = Thrift.copyList(args.sourceIds, [uuid_ttypes.UUID]);
      }
      if (args.sourceCommunication !== undefined && args.sourceCommunication !== null) {
        this.sourceCommunication = new communication_ttypes.Communication(args.sourceCommunication);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.queryTerms = [];
          const _rtmp31 = input.readListBegin();
          const _size0 = _rtmp31.size || 0;
          for (let _i2 = 0; _i2 < _size0; ++_i2) {
            let elem3 = null;
            elem3 = input.readString();
            this.queryTerms.push(elem3);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.maximumTokens = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.maximumCharacters = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.sourceType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.LIST) {
          this.sourceIds = [];
          const _rtmp35 = input.readListBegin();
          const _size4 = _rtmp35.size || 0;
          for (let _i6 = 0; _i6 < _size4; ++_i6) {
            let elem7 = null;
            elem7 = new uuid_ttypes.UUID();
            elem7.read(input);
            this.sourceIds.push(elem7);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.sourceCommunication = new communication_ttypes.Communication();
          this.sourceCommunication.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SummarizationRequest');
    if (this.queryTerms !== null && this.queryTerms !== undefined) {
      output.writeFieldBegin('queryTerms', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.queryTerms.length);
      for (let iter8 in this.queryTerms) {
        if (this.queryTerms.hasOwnProperty(iter8)) {
          iter8 = this.queryTerms[iter8];
          output.writeString(iter8);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.maximumTokens !== null && this.maximumTokens !== undefined) {
      output.writeFieldBegin('maximumTokens', Thrift.Type.I32, 2);
      output.writeI32(this.maximumTokens);
      output.writeFieldEnd();
    }
    if (this.maximumCharacters !== null && this.maximumCharacters !== undefined) {
      output.writeFieldBegin('maximumCharacters', Thrift.Type.I32, 3);
      output.writeI32(this.maximumCharacters);
      output.writeFieldEnd();
    }
    if (this.sourceType !== null && this.sourceType !== undefined) {
      output.writeFieldBegin('sourceType', Thrift.Type.I32, 4);
      output.writeI32(this.sourceType);
      output.writeFieldEnd();
    }
    if (this.sourceIds !== null && this.sourceIds !== undefined) {
      output.writeFieldBegin('sourceIds', Thrift.Type.LIST, 5);
      output.writeListBegin(Thrift.Type.STRUCT, this.sourceIds.length);
      for (let iter9 in this.sourceIds) {
        if (this.sourceIds.hasOwnProperty(iter9)) {
          iter9 = this.sourceIds[iter9];
          iter9.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.sourceCommunication !== null && this.sourceCommunication !== undefined) {
      output.writeFieldBegin('sourceCommunication', Thrift.Type.STRUCT, 6);
      this.sourceCommunication.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SummaryConcept = module.exports.SummaryConcept = class {
  constructor(args) {
    this.tokens = null;
    this.concept = null;
    this.confidence = 1;
    this.utility = 1;
    if (args) {
      if (args.tokens !== undefined && args.tokens !== null) {
        this.tokens = new structure_ttypes.TokenRefSequence(args.tokens);
      }
      if (args.concept !== undefined && args.concept !== null) {
        this.concept = args.concept;
      }
      if (args.confidence !== undefined && args.confidence !== null) {
        this.confidence = args.confidence;
      }
      if (args.utility !== undefined && args.utility !== null) {
        this.utility = args.utility;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.tokens = new structure_ttypes.TokenRefSequence();
          this.tokens.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.concept = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.DOUBLE) {
          this.confidence = input.readDouble();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.DOUBLE) {
          this.utility = input.readDouble();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SummaryConcept');
    if (this.tokens !== null && this.tokens !== undefined) {
      output.writeFieldBegin('tokens', Thrift.Type.STRUCT, 1);
      this.tokens.write(output);
      output.writeFieldEnd();
    }
    if (this.concept !== null && this.concept !== undefined) {
      output.writeFieldBegin('concept', Thrift.Type.STRING, 2);
      output.writeString(this.concept);
      output.writeFieldEnd();
    }
    if (this.confidence !== null && this.confidence !== undefined) {
      output.writeFieldBegin('confidence', Thrift.Type.DOUBLE, 3);
      output.writeDouble(this.confidence);
      output.writeFieldEnd();
    }
    if (this.utility !== null && this.utility !== undefined) {
      output.writeFieldBegin('utility', Thrift.Type.DOUBLE, 4);
      output.writeDouble(this.utility);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Summary = module.exports.Summary = class {
  constructor(args) {
    this.summaryCommunication = null;
    this.concepts = null;
    if (args) {
      if (args.summaryCommunication !== undefined && args.summaryCommunication !== null) {
        this.summaryCommunication = new communication_ttypes.Communication(args.summaryCommunication);
      }
      if (args.concepts !== undefined && args.concepts !== null) {
        this.concepts = Thrift.copyList(args.concepts, [ttypes.SummaryConcept]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.summaryCommunication = new communication_ttypes.Communication();
          this.summaryCommunication.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.concepts = [];
          const _rtmp311 = input.readListBegin();
          const _size10 = _rtmp311.size || 0;
          for (let _i12 = 0; _i12 < _size10; ++_i12) {
            let elem13 = null;
            elem13 = new ttypes.SummaryConcept();
            elem13.read(input);
            this.concepts.push(elem13);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Summary');
    if (this.summaryCommunication !== null && this.summaryCommunication !== undefined) {
      output.writeFieldBegin('summaryCommunication', Thrift.Type.STRUCT, 1);
      this.summaryCommunication.write(output);
      output.writeFieldEnd();
    }
    if (this.concepts !== null && this.concepts !== undefined) {
      output.writeFieldBegin('concepts', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.concepts.length);
      for (let iter14 in this.concepts) {
        if (this.concepts.hasOwnProperty(iter14)) {
          iter14 = this.concepts[iter14];
          iter14.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SummarizationCapability = module.exports.SummarizationCapability = class {
  constructor(args) {
    this.type = null;
    this.lang = null;
    if (args) {
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
      }
      if (args.lang !== undefined && args.lang !== null) {
        this.lang = args.lang;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field lang is unset!');
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.lang = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SummarizationCapability');
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 1);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    if (this.lang !== null && this.lang !== undefined) {
      output.writeFieldBegin('lang', Thrift.Type.STRING, 2);
      output.writeString(this.lang);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
