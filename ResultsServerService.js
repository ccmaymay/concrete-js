//
// Autogenerated by Thrift Compiler (0.18.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');

const services_ttypes = require('./services_types');
const uuid_ttypes = require('./uuid_types');
const search_ttypes = require('./search_types');
const communication_ttypes = require('./communication_types');


const Service = require('./Service');
const ServiceClient = Service.Client;
const ServiceProcessor = Service.Processor;
const ttypes = require('./results_types');
//HELPER FUNCTIONS AND STRUCTURES

const ResultsServerService_registerSearchResult_args = class {
  constructor(args) {
    this.result = null;
    this.taskType = null;
    if (args) {
      if (args.result !== undefined && args.result !== null) {
        this.result = new search_ttypes.SearchResult(args.result);
      }
      if (args.taskType !== undefined && args.taskType !== null) {
        this.taskType = args.taskType;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.result = new search_ttypes.SearchResult();
          this.result.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.taskType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ResultsServerService_registerSearchResult_args');
    if (this.result !== null && this.result !== undefined) {
      output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
      this.result.write(output);
      output.writeFieldEnd();
    }
    if (this.taskType !== null && this.taskType !== undefined) {
      output.writeFieldBegin('taskType', Thrift.Type.I32, 2);
      output.writeI32(this.taskType);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ResultsServerService_registerSearchResult_result = class {
  constructor(args) {
    this.ex = null;
    if (args instanceof services_ttypes.ServicesException) {
        this.ex = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new services_ttypes.ServicesException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ResultsServerService_registerSearchResult_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ResultsServerService_getSearchResults_args = class {
  constructor(args) {
    this.taskType = null;
    this.limit = null;
    if (args) {
      if (args.taskType !== undefined && args.taskType !== null) {
        this.taskType = args.taskType;
      }
      if (args.limit !== undefined && args.limit !== null) {
        this.limit = args.limit;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.taskType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.limit = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ResultsServerService_getSearchResults_args');
    if (this.taskType !== null && this.taskType !== undefined) {
      output.writeFieldBegin('taskType', Thrift.Type.I32, 1);
      output.writeI32(this.taskType);
      output.writeFieldEnd();
    }
    if (this.limit !== null && this.limit !== undefined) {
      output.writeFieldBegin('limit', Thrift.Type.I32, 2);
      output.writeI32(this.limit);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ResultsServerService_getSearchResults_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    if (args instanceof services_ttypes.ServicesException) {
        this.ex = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [search_ttypes.SearchResult]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp31 = input.readListBegin();
          const _size0 = _rtmp31.size || 0;
          for (let _i2 = 0; _i2 < _size0; ++_i2) {
            let elem3 = null;
            elem3 = new search_ttypes.SearchResult();
            elem3.read(input);
            this.success.push(elem3);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new services_ttypes.ServicesException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ResultsServerService_getSearchResults_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter4 in this.success) {
        if (this.success.hasOwnProperty(iter4)) {
          iter4 = this.success[iter4];
          iter4.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ResultsServerService_getSearchResultsByUser_args = class {
  constructor(args) {
    this.taskType = null;
    this.userId = null;
    this.limit = null;
    if (args) {
      if (args.taskType !== undefined && args.taskType !== null) {
        this.taskType = args.taskType;
      }
      if (args.userId !== undefined && args.userId !== null) {
        this.userId = args.userId;
      }
      if (args.limit !== undefined && args.limit !== null) {
        this.limit = args.limit;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.taskType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.userId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.limit = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ResultsServerService_getSearchResultsByUser_args');
    if (this.taskType !== null && this.taskType !== undefined) {
      output.writeFieldBegin('taskType', Thrift.Type.I32, 1);
      output.writeI32(this.taskType);
      output.writeFieldEnd();
    }
    if (this.userId !== null && this.userId !== undefined) {
      output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
      output.writeString(this.userId);
      output.writeFieldEnd();
    }
    if (this.limit !== null && this.limit !== undefined) {
      output.writeFieldBegin('limit', Thrift.Type.I32, 3);
      output.writeI32(this.limit);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ResultsServerService_getSearchResultsByUser_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    if (args instanceof services_ttypes.ServicesException) {
        this.ex = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [search_ttypes.SearchResult]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp36 = input.readListBegin();
          const _size5 = _rtmp36.size || 0;
          for (let _i7 = 0; _i7 < _size5; ++_i7) {
            let elem8 = null;
            elem8 = new search_ttypes.SearchResult();
            elem8.read(input);
            this.success.push(elem8);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new services_ttypes.ServicesException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ResultsServerService_getSearchResultsByUser_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter9 in this.success) {
        if (this.success.hasOwnProperty(iter9)) {
          iter9 = this.success[iter9];
          iter9.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ResultsServerService_getLatestSearchResult_args = class {
  constructor(args) {
    this.userId = null;
    if (args) {
      if (args.userId !== undefined && args.userId !== null) {
        this.userId = args.userId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ResultsServerService_getLatestSearchResult_args');
    if (this.userId !== null && this.userId !== undefined) {
      output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
      output.writeString(this.userId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ResultsServerService_getLatestSearchResult_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    if (args instanceof services_ttypes.ServicesException) {
        this.ex = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new search_ttypes.SearchResult(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new search_ttypes.SearchResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new services_ttypes.ServicesException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ResultsServerService_getLatestSearchResult_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ResultsServerService_getSearchResult_args = class {
  constructor(args) {
    this.searchResultId = null;
    if (args) {
      if (args.searchResultId !== undefined && args.searchResultId !== null) {
        this.searchResultId = new uuid_ttypes.UUID(args.searchResultId);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.searchResultId = new uuid_ttypes.UUID();
          this.searchResultId.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ResultsServerService_getSearchResult_args');
    if (this.searchResultId !== null && this.searchResultId !== undefined) {
      output.writeFieldBegin('searchResultId', Thrift.Type.STRUCT, 1);
      this.searchResultId.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ResultsServerService_getSearchResult_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    if (args instanceof services_ttypes.ServicesException) {
        this.ex = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new search_ttypes.SearchResult(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new search_ttypes.SearchResult();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new services_ttypes.ServicesException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ResultsServerService_getSearchResult_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ResultsServerService_startSession_args = class {
  constructor(args) {
    this.searchResultId = null;
    this.taskType = null;
    if (args) {
      if (args.searchResultId !== undefined && args.searchResultId !== null) {
        this.searchResultId = new uuid_ttypes.UUID(args.searchResultId);
      }
      if (args.taskType !== undefined && args.taskType !== null) {
        this.taskType = args.taskType;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.searchResultId = new uuid_ttypes.UUID();
          this.searchResultId.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.taskType = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ResultsServerService_startSession_args');
    if (this.searchResultId !== null && this.searchResultId !== undefined) {
      output.writeFieldBegin('searchResultId', Thrift.Type.STRUCT, 1);
      this.searchResultId.write(output);
      output.writeFieldEnd();
    }
    if (this.taskType !== null && this.taskType !== undefined) {
      output.writeFieldBegin('taskType', Thrift.Type.I32, 2);
      output.writeI32(this.taskType);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ResultsServerService_startSession_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    if (args instanceof services_ttypes.ServicesException) {
        this.ex = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new uuid_ttypes.UUID(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new uuid_ttypes.UUID();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new services_ttypes.ServicesException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ResultsServerService_startSession_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ResultsServerService_stopSession_args = class {
  constructor(args) {
    this.sessionId = null;
    if (args) {
      if (args.sessionId !== undefined && args.sessionId !== null) {
        this.sessionId = new uuid_ttypes.UUID(args.sessionId);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.sessionId = new uuid_ttypes.UUID();
          this.sessionId.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ResultsServerService_stopSession_args');
    if (this.sessionId !== null && this.sessionId !== undefined) {
      output.writeFieldBegin('sessionId', Thrift.Type.STRUCT, 1);
      this.sessionId.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ResultsServerService_stopSession_result = class {
  constructor(args) {
    this.ex = null;
    if (args instanceof services_ttypes.ServicesException) {
        this.ex = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new services_ttypes.ServicesException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ResultsServerService_stopSession_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ResultsServerService_getNextChunk_args = class {
  constructor(args) {
    this.sessionId = null;
    if (args) {
      if (args.sessionId !== undefined && args.sessionId !== null) {
        this.sessionId = new uuid_ttypes.UUID(args.sessionId);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.sessionId = new uuid_ttypes.UUID();
          this.sessionId.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ResultsServerService_getNextChunk_args');
    if (this.sessionId !== null && this.sessionId !== undefined) {
      output.writeFieldBegin('sessionId', Thrift.Type.STRUCT, 1);
      this.sessionId.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ResultsServerService_getNextChunk_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    if (args instanceof services_ttypes.ServicesException) {
        this.ex = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [services_ttypes.AnnotationUnitIdentifier]);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp311 = input.readListBegin();
          const _size10 = _rtmp311.size || 0;
          for (let _i12 = 0; _i12 < _size10; ++_i12) {
            let elem13 = null;
            elem13 = new services_ttypes.AnnotationUnitIdentifier();
            elem13.read(input);
            this.success.push(elem13);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new services_ttypes.ServicesException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ResultsServerService_getNextChunk_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter14 in this.success) {
        if (this.success.hasOwnProperty(iter14)) {
          iter14 = this.success[iter14];
          iter14.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ResultsServerService_submitAnnotation_args = class {
  constructor(args) {
    this.sessionId = null;
    this.unitId = null;
    this.communication = null;
    if (args) {
      if (args.sessionId !== undefined && args.sessionId !== null) {
        this.sessionId = new uuid_ttypes.UUID(args.sessionId);
      }
      if (args.unitId !== undefined && args.unitId !== null) {
        this.unitId = new services_ttypes.AnnotationUnitIdentifier(args.unitId);
      }
      if (args.communication !== undefined && args.communication !== null) {
        this.communication = new communication_ttypes.Communication(args.communication);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.sessionId = new uuid_ttypes.UUID();
          this.sessionId.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.unitId = new services_ttypes.AnnotationUnitIdentifier();
          this.unitId.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.communication = new communication_ttypes.Communication();
          this.communication.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ResultsServerService_submitAnnotation_args');
    if (this.sessionId !== null && this.sessionId !== undefined) {
      output.writeFieldBegin('sessionId', Thrift.Type.STRUCT, 1);
      this.sessionId.write(output);
      output.writeFieldEnd();
    }
    if (this.unitId !== null && this.unitId !== undefined) {
      output.writeFieldBegin('unitId', Thrift.Type.STRUCT, 2);
      this.unitId.write(output);
      output.writeFieldEnd();
    }
    if (this.communication !== null && this.communication !== undefined) {
      output.writeFieldBegin('communication', Thrift.Type.STRUCT, 3);
      this.communication.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ResultsServerService_submitAnnotation_result = class {
  constructor(args) {
    this.ex = null;
    if (args instanceof services_ttypes.ServicesException) {
        this.ex = args;
        return;
    }
    if (args) {
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new services_ttypes.ServicesException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ResultsServerService_submitAnnotation_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ResultsServerServiceClient = exports.Client = class ResultsServerServiceClient extends ServiceClient {
  constructor(output, pClass) {
    super(output, pClass);
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
  }
  seqid () { return this._seqid; }
  new_seqid () { return this._seqid += 1; }

  registerSearchResult (result, taskType) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_registerSearchResult(result, taskType);
    });
  }

  send_registerSearchResult (result, taskType) {
    const output = new this.pClass(this.output);
    const params = {
      result: result,
      taskType: taskType
    };
    const args = new ResultsServerService_registerSearchResult_args(params);
    try {
      output.writeMessageBegin('registerSearchResult', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_registerSearchResult (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ResultsServerService_registerSearchResult_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    callback(null);
  }

  getSearchResults (taskType, limit) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getSearchResults(taskType, limit);
    });
  }

  send_getSearchResults (taskType, limit) {
    const output = new this.pClass(this.output);
    const params = {
      taskType: taskType,
      limit: limit
    };
    const args = new ResultsServerService_getSearchResults_args(params);
    try {
      output.writeMessageBegin('getSearchResults', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getSearchResults (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ResultsServerService_getSearchResults_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getSearchResults failed: unknown result');
  }

  getSearchResultsByUser (taskType, userId, limit) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getSearchResultsByUser(taskType, userId, limit);
    });
  }

  send_getSearchResultsByUser (taskType, userId, limit) {
    const output = new this.pClass(this.output);
    const params = {
      taskType: taskType,
      userId: userId,
      limit: limit
    };
    const args = new ResultsServerService_getSearchResultsByUser_args(params);
    try {
      output.writeMessageBegin('getSearchResultsByUser', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getSearchResultsByUser (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ResultsServerService_getSearchResultsByUser_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getSearchResultsByUser failed: unknown result');
  }

  getLatestSearchResult (userId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getLatestSearchResult(userId);
    });
  }

  send_getLatestSearchResult (userId) {
    const output = new this.pClass(this.output);
    const params = {
      userId: userId
    };
    const args = new ResultsServerService_getLatestSearchResult_args(params);
    try {
      output.writeMessageBegin('getLatestSearchResult', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getLatestSearchResult (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ResultsServerService_getLatestSearchResult_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getLatestSearchResult failed: unknown result');
  }

  getSearchResult (searchResultId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getSearchResult(searchResultId);
    });
  }

  send_getSearchResult (searchResultId) {
    const output = new this.pClass(this.output);
    const params = {
      searchResultId: searchResultId
    };
    const args = new ResultsServerService_getSearchResult_args(params);
    try {
      output.writeMessageBegin('getSearchResult', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getSearchResult (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ResultsServerService_getSearchResult_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getSearchResult failed: unknown result');
  }

  startSession (searchResultId, taskType) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_startSession(searchResultId, taskType);
    });
  }

  send_startSession (searchResultId, taskType) {
    const output = new this.pClass(this.output);
    const params = {
      searchResultId: searchResultId,
      taskType: taskType
    };
    const args = new ResultsServerService_startSession_args(params);
    try {
      output.writeMessageBegin('startSession', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_startSession (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ResultsServerService_startSession_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('startSession failed: unknown result');
  }

  stopSession (sessionId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_stopSession(sessionId);
    });
  }

  send_stopSession (sessionId) {
    const output = new this.pClass(this.output);
    const params = {
      sessionId: sessionId
    };
    const args = new ResultsServerService_stopSession_args(params);
    try {
      output.writeMessageBegin('stopSession', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_stopSession (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ResultsServerService_stopSession_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    callback(null);
  }

  getNextChunk (sessionId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getNextChunk(sessionId);
    });
  }

  send_getNextChunk (sessionId) {
    const output = new this.pClass(this.output);
    const params = {
      sessionId: sessionId
    };
    const args = new ResultsServerService_getNextChunk_args(params);
    try {
      output.writeMessageBegin('getNextChunk', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getNextChunk (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ResultsServerService_getNextChunk_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getNextChunk failed: unknown result');
  }

  submitAnnotation (sessionId, unitId, communication) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_submitAnnotation(sessionId, unitId, communication);
    });
  }

  send_submitAnnotation (sessionId, unitId, communication) {
    const output = new this.pClass(this.output);
    const params = {
      sessionId: sessionId,
      unitId: unitId,
      communication: communication
    };
    const args = new ResultsServerService_submitAnnotation_args(params);
    try {
      output.writeMessageBegin('submitAnnotation', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_submitAnnotation (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ResultsServerService_submitAnnotation_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    callback(null);
  }
};
const ResultsServerServiceProcessor = exports.Processor = class ResultsServerServiceProcessor extends ServiceProcessor {
  constructor(handler) {
    super(handler);
    this._handler = handler;
  }
  process (input, output) {
    const r = input.readMessageBegin();
    if (this['process_' + r.fname]) {
      return this['process_' + r.fname].call(this, r.rseqid, input, output);
    } else {
      input.skip(Thrift.Type.STRUCT);
      input.readMessageEnd();
      const x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
      output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
      x.write(output);
      output.writeMessageEnd();
      output.flush();
    }
  }
  process_registerSearchResult (seqid, input, output) {
    const args = new ResultsServerService_registerSearchResult_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.registerSearchResult.length === 2) {
      new Promise((resolve) => resolve(this._handler.registerSearchResult.bind(this._handler)(
        args.result,
        args.taskType
      ))).then(result => {
        const result_obj = new ResultsServerService_registerSearchResult_result({success: result});
        output.writeMessageBegin("registerSearchResult", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof services_ttypes.ServicesException) {
          result = new ResultsServerService_registerSearchResult_result(err);
          output.writeMessageBegin("registerSearchResult", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerSearchResult", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.registerSearchResult(args.result, args.taskType, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof services_ttypes.ServicesException) {
          result_obj = new ResultsServerService_registerSearchResult_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("registerSearchResult", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerSearchResult", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getSearchResults (seqid, input, output) {
    const args = new ResultsServerService_getSearchResults_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getSearchResults.length === 2) {
      new Promise((resolve) => resolve(this._handler.getSearchResults.bind(this._handler)(
        args.taskType,
        args.limit
      ))).then(result => {
        const result_obj = new ResultsServerService_getSearchResults_result({success: result});
        output.writeMessageBegin("getSearchResults", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof services_ttypes.ServicesException) {
          result = new ResultsServerService_getSearchResults_result(err);
          output.writeMessageBegin("getSearchResults", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSearchResults", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getSearchResults(args.taskType, args.limit, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof services_ttypes.ServicesException) {
          result_obj = new ResultsServerService_getSearchResults_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getSearchResults", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSearchResults", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getSearchResultsByUser (seqid, input, output) {
    const args = new ResultsServerService_getSearchResultsByUser_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getSearchResultsByUser.length === 3) {
      new Promise((resolve) => resolve(this._handler.getSearchResultsByUser.bind(this._handler)(
        args.taskType,
        args.userId,
        args.limit
      ))).then(result => {
        const result_obj = new ResultsServerService_getSearchResultsByUser_result({success: result});
        output.writeMessageBegin("getSearchResultsByUser", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof services_ttypes.ServicesException) {
          result = new ResultsServerService_getSearchResultsByUser_result(err);
          output.writeMessageBegin("getSearchResultsByUser", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSearchResultsByUser", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getSearchResultsByUser(args.taskType, args.userId, args.limit, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof services_ttypes.ServicesException) {
          result_obj = new ResultsServerService_getSearchResultsByUser_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getSearchResultsByUser", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSearchResultsByUser", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getLatestSearchResult (seqid, input, output) {
    const args = new ResultsServerService_getLatestSearchResult_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getLatestSearchResult.length === 1) {
      new Promise((resolve) => resolve(this._handler.getLatestSearchResult.bind(this._handler)(
        args.userId
      ))).then(result => {
        const result_obj = new ResultsServerService_getLatestSearchResult_result({success: result});
        output.writeMessageBegin("getLatestSearchResult", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof services_ttypes.ServicesException) {
          result = new ResultsServerService_getLatestSearchResult_result(err);
          output.writeMessageBegin("getLatestSearchResult", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getLatestSearchResult", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getLatestSearchResult(args.userId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof services_ttypes.ServicesException) {
          result_obj = new ResultsServerService_getLatestSearchResult_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getLatestSearchResult", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getLatestSearchResult", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getSearchResult (seqid, input, output) {
    const args = new ResultsServerService_getSearchResult_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getSearchResult.length === 1) {
      new Promise((resolve) => resolve(this._handler.getSearchResult.bind(this._handler)(
        args.searchResultId
      ))).then(result => {
        const result_obj = new ResultsServerService_getSearchResult_result({success: result});
        output.writeMessageBegin("getSearchResult", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof services_ttypes.ServicesException) {
          result = new ResultsServerService_getSearchResult_result(err);
          output.writeMessageBegin("getSearchResult", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSearchResult", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getSearchResult(args.searchResultId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof services_ttypes.ServicesException) {
          result_obj = new ResultsServerService_getSearchResult_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getSearchResult", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSearchResult", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_startSession (seqid, input, output) {
    const args = new ResultsServerService_startSession_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.startSession.length === 2) {
      new Promise((resolve) => resolve(this._handler.startSession.bind(this._handler)(
        args.searchResultId,
        args.taskType
      ))).then(result => {
        const result_obj = new ResultsServerService_startSession_result({success: result});
        output.writeMessageBegin("startSession", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof services_ttypes.ServicesException) {
          result = new ResultsServerService_startSession_result(err);
          output.writeMessageBegin("startSession", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("startSession", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.startSession(args.searchResultId, args.taskType, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof services_ttypes.ServicesException) {
          result_obj = new ResultsServerService_startSession_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("startSession", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("startSession", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_stopSession (seqid, input, output) {
    const args = new ResultsServerService_stopSession_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.stopSession.length === 1) {
      new Promise((resolve) => resolve(this._handler.stopSession.bind(this._handler)(
        args.sessionId
      ))).then(result => {
        const result_obj = new ResultsServerService_stopSession_result({success: result});
        output.writeMessageBegin("stopSession", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof services_ttypes.ServicesException) {
          result = new ResultsServerService_stopSession_result(err);
          output.writeMessageBegin("stopSession", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("stopSession", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.stopSession(args.sessionId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof services_ttypes.ServicesException) {
          result_obj = new ResultsServerService_stopSession_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("stopSession", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("stopSession", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getNextChunk (seqid, input, output) {
    const args = new ResultsServerService_getNextChunk_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getNextChunk.length === 1) {
      new Promise((resolve) => resolve(this._handler.getNextChunk.bind(this._handler)(
        args.sessionId
      ))).then(result => {
        const result_obj = new ResultsServerService_getNextChunk_result({success: result});
        output.writeMessageBegin("getNextChunk", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof services_ttypes.ServicesException) {
          result = new ResultsServerService_getNextChunk_result(err);
          output.writeMessageBegin("getNextChunk", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getNextChunk", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getNextChunk(args.sessionId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof services_ttypes.ServicesException) {
          result_obj = new ResultsServerService_getNextChunk_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getNextChunk", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getNextChunk", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_submitAnnotation (seqid, input, output) {
    const args = new ResultsServerService_submitAnnotation_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.submitAnnotation.length === 3) {
      new Promise((resolve) => resolve(this._handler.submitAnnotation.bind(this._handler)(
        args.sessionId,
        args.unitId,
        args.communication
      ))).then(result => {
        const result_obj = new ResultsServerService_submitAnnotation_result({success: result});
        output.writeMessageBegin("submitAnnotation", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof services_ttypes.ServicesException) {
          result = new ResultsServerService_submitAnnotation_result(err);
          output.writeMessageBegin("submitAnnotation", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("submitAnnotation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.submitAnnotation(args.sessionId, args.unitId, args.communication, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof services_ttypes.ServicesException) {
          result_obj = new ResultsServerService_submitAnnotation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("submitAnnotation", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("submitAnnotation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
};
