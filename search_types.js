//
// Autogenerated by Thrift Compiler (0.18.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');

const communication_ttypes = require('./communication_types');
const services_ttypes = require('./services_types');
const structure_ttypes = require('./structure_types');
const uuid_ttypes = require('./uuid_types');
const metadata_ttypes = require('./metadata_types');
const entities_ttypes = require('./entities_types');


const ttypes = module.exports = {};
ttypes.SearchType = {
  'COMMUNICATIONS' : 0,
  'SECTIONS' : 1,
  'SENTENCES' : 2,
  'ENTITIES' : 3,
  'ENTITY_MENTIONS' : 4,
  'SITUATIONS' : 5,
  'SITUATION_MENTIONS' : 6
};
ttypes.SearchFeedback = {
  'NEGATIVE' : -1,
  'NONE' : 0,
  'POSITIVE' : 1
};
const SearchCapability = module.exports.SearchCapability = class {
  constructor(args) {
    this.type = null;
    this.lang = null;
    if (args) {
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
      }
      if (args.lang !== undefined && args.lang !== null) {
        this.lang = args.lang;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field lang is unset!');
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.lang = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SearchCapability');
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 1);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    if (this.lang !== null && this.lang !== undefined) {
      output.writeFieldBegin('lang', Thrift.Type.STRING, 2);
      output.writeString(this.lang);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SearchQuery = module.exports.SearchQuery = class {
  constructor(args) {
    this.terms = null;
    this.questions = null;
    this.communicationId = null;
    this.tokens = null;
    this.rawQuery = null;
    this.auths = null;
    this.userId = null;
    this.name = null;
    this.labels = null;
    this.type = null;
    this.lang = null;
    this.corpus = null;
    this.k = null;
    this.communication = null;
    if (args) {
      if (args.terms !== undefined && args.terms !== null) {
        this.terms = Thrift.copyList(args.terms, [null]);
      }
      if (args.questions !== undefined && args.questions !== null) {
        this.questions = Thrift.copyList(args.questions, [null]);
      }
      if (args.communicationId !== undefined && args.communicationId !== null) {
        this.communicationId = args.communicationId;
      }
      if (args.tokens !== undefined && args.tokens !== null) {
        this.tokens = new structure_ttypes.TokenRefSequence(args.tokens);
      }
      if (args.rawQuery !== undefined && args.rawQuery !== null) {
        this.rawQuery = args.rawQuery;
      }
      if (args.auths !== undefined && args.auths !== null) {
        this.auths = args.auths;
      }
      if (args.userId !== undefined && args.userId !== null) {
        this.userId = args.userId;
      }
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.labels !== undefined && args.labels !== null) {
        this.labels = Thrift.copyList(args.labels, [null]);
      }
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
      }
      if (args.lang !== undefined && args.lang !== null) {
        this.lang = args.lang;
      }
      if (args.corpus !== undefined && args.corpus !== null) {
        this.corpus = args.corpus;
      }
      if (args.k !== undefined && args.k !== null) {
        this.k = args.k;
      }
      if (args.communication !== undefined && args.communication !== null) {
        this.communication = new communication_ttypes.Communication(args.communication);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.terms = [];
          const _rtmp31 = input.readListBegin();
          const _size0 = _rtmp31.size || 0;
          for (let _i2 = 0; _i2 < _size0; ++_i2) {
            let elem3 = null;
            elem3 = input.readString();
            this.terms.push(elem3);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.questions = [];
          const _rtmp35 = input.readListBegin();
          const _size4 = _rtmp35.size || 0;
          for (let _i6 = 0; _i6 < _size4; ++_i6) {
            let elem7 = null;
            elem7 = input.readString();
            this.questions.push(elem7);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.communicationId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.tokens = new structure_ttypes.TokenRefSequence();
          this.tokens.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.rawQuery = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.auths = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.userId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.LIST) {
          this.labels = [];
          const _rtmp39 = input.readListBegin();
          const _size8 = _rtmp39.size || 0;
          for (let _i10 = 0; _i10 < _size8; ++_i10) {
            let elem11 = null;
            elem11 = input.readString();
            this.labels.push(elem11);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRING) {
          this.lang = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.STRING) {
          this.corpus = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.I32) {
          this.k = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.STRUCT) {
          this.communication = new communication_ttypes.Communication();
          this.communication.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SearchQuery');
    if (this.terms !== null && this.terms !== undefined) {
      output.writeFieldBegin('terms', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.terms.length);
      for (let iter12 in this.terms) {
        if (this.terms.hasOwnProperty(iter12)) {
          iter12 = this.terms[iter12];
          output.writeString(iter12);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.questions !== null && this.questions !== undefined) {
      output.writeFieldBegin('questions', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRING, this.questions.length);
      for (let iter13 in this.questions) {
        if (this.questions.hasOwnProperty(iter13)) {
          iter13 = this.questions[iter13];
          output.writeString(iter13);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.communicationId !== null && this.communicationId !== undefined) {
      output.writeFieldBegin('communicationId', Thrift.Type.STRING, 3);
      output.writeString(this.communicationId);
      output.writeFieldEnd();
    }
    if (this.tokens !== null && this.tokens !== undefined) {
      output.writeFieldBegin('tokens', Thrift.Type.STRUCT, 4);
      this.tokens.write(output);
      output.writeFieldEnd();
    }
    if (this.rawQuery !== null && this.rawQuery !== undefined) {
      output.writeFieldBegin('rawQuery', Thrift.Type.STRING, 5);
      output.writeString(this.rawQuery);
      output.writeFieldEnd();
    }
    if (this.auths !== null && this.auths !== undefined) {
      output.writeFieldBegin('auths', Thrift.Type.STRING, 6);
      output.writeString(this.auths);
      output.writeFieldEnd();
    }
    if (this.userId !== null && this.userId !== undefined) {
      output.writeFieldBegin('userId', Thrift.Type.STRING, 7);
      output.writeString(this.userId);
      output.writeFieldEnd();
    }
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 8);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.labels !== null && this.labels !== undefined) {
      output.writeFieldBegin('labels', Thrift.Type.LIST, 9);
      output.writeListBegin(Thrift.Type.STRING, this.labels.length);
      for (let iter14 in this.labels) {
        if (this.labels.hasOwnProperty(iter14)) {
          iter14 = this.labels[iter14];
          output.writeString(iter14);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 10);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    if (this.lang !== null && this.lang !== undefined) {
      output.writeFieldBegin('lang', Thrift.Type.STRING, 11);
      output.writeString(this.lang);
      output.writeFieldEnd();
    }
    if (this.corpus !== null && this.corpus !== undefined) {
      output.writeFieldBegin('corpus', Thrift.Type.STRING, 12);
      output.writeString(this.corpus);
      output.writeFieldEnd();
    }
    if (this.k !== null && this.k !== undefined) {
      output.writeFieldBegin('k', Thrift.Type.I32, 13);
      output.writeI32(this.k);
      output.writeFieldEnd();
    }
    if (this.communication !== null && this.communication !== undefined) {
      output.writeFieldBegin('communication', Thrift.Type.STRUCT, 14);
      this.communication.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SearchResultItem = module.exports.SearchResultItem = class {
  constructor(args) {
    this.communicationId = null;
    this.sentenceId = null;
    this.score = null;
    this.tokens = null;
    this.entity = null;
    if (args) {
      if (args.communicationId !== undefined && args.communicationId !== null) {
        this.communicationId = args.communicationId;
      }
      if (args.sentenceId !== undefined && args.sentenceId !== null) {
        this.sentenceId = new uuid_ttypes.UUID(args.sentenceId);
      }
      if (args.score !== undefined && args.score !== null) {
        this.score = args.score;
      }
      if (args.tokens !== undefined && args.tokens !== null) {
        this.tokens = new structure_ttypes.TokenRefSequence(args.tokens);
      }
      if (args.entity !== undefined && args.entity !== null) {
        this.entity = new entities_ttypes.Entity(args.entity);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.communicationId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.sentenceId = new uuid_ttypes.UUID();
          this.sentenceId.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.DOUBLE) {
          this.score = input.readDouble();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.tokens = new structure_ttypes.TokenRefSequence();
          this.tokens.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.entity = new entities_ttypes.Entity();
          this.entity.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SearchResultItem');
    if (this.communicationId !== null && this.communicationId !== undefined) {
      output.writeFieldBegin('communicationId', Thrift.Type.STRING, 1);
      output.writeString(this.communicationId);
      output.writeFieldEnd();
    }
    if (this.sentenceId !== null && this.sentenceId !== undefined) {
      output.writeFieldBegin('sentenceId', Thrift.Type.STRUCT, 2);
      this.sentenceId.write(output);
      output.writeFieldEnd();
    }
    if (this.score !== null && this.score !== undefined) {
      output.writeFieldBegin('score', Thrift.Type.DOUBLE, 3);
      output.writeDouble(this.score);
      output.writeFieldEnd();
    }
    if (this.tokens !== null && this.tokens !== undefined) {
      output.writeFieldBegin('tokens', Thrift.Type.STRUCT, 4);
      this.tokens.write(output);
      output.writeFieldEnd();
    }
    if (this.entity !== null && this.entity !== undefined) {
      output.writeFieldBegin('entity', Thrift.Type.STRUCT, 5);
      this.entity.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SearchResult = module.exports.SearchResult = class {
  constructor(args) {
    this.uuid = null;
    this.searchQuery = null;
    this.searchResultItems = null;
    this.metadata = null;
    this.lang = null;
    if (args) {
      if (args.uuid !== undefined && args.uuid !== null) {
        this.uuid = new uuid_ttypes.UUID(args.uuid);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
      }
      if (args.searchQuery !== undefined && args.searchQuery !== null) {
        this.searchQuery = new ttypes.SearchQuery(args.searchQuery);
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field searchQuery is unset!');
      }
      if (args.searchResultItems !== undefined && args.searchResultItems !== null) {
        this.searchResultItems = Thrift.copyList(args.searchResultItems, [ttypes.SearchResultItem]);
      }
      if (args.metadata !== undefined && args.metadata !== null) {
        this.metadata = new metadata_ttypes.AnnotationMetadata(args.metadata);
      }
      if (args.lang !== undefined && args.lang !== null) {
        this.lang = args.lang;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.uuid = new uuid_ttypes.UUID();
          this.uuid.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.searchQuery = new ttypes.SearchQuery();
          this.searchQuery.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.searchResultItems = [];
          const _rtmp316 = input.readListBegin();
          const _size15 = _rtmp316.size || 0;
          for (let _i17 = 0; _i17 < _size15; ++_i17) {
            let elem18 = null;
            elem18 = new ttypes.SearchResultItem();
            elem18.read(input);
            this.searchResultItems.push(elem18);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.metadata = new metadata_ttypes.AnnotationMetadata();
          this.metadata.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.lang = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SearchResult');
    if (this.uuid !== null && this.uuid !== undefined) {
      output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 1);
      this.uuid.write(output);
      output.writeFieldEnd();
    }
    if (this.searchQuery !== null && this.searchQuery !== undefined) {
      output.writeFieldBegin('searchQuery', Thrift.Type.STRUCT, 2);
      this.searchQuery.write(output);
      output.writeFieldEnd();
    }
    if (this.searchResultItems !== null && this.searchResultItems !== undefined) {
      output.writeFieldBegin('searchResultItems', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.searchResultItems.length);
      for (let iter19 in this.searchResultItems) {
        if (this.searchResultItems.hasOwnProperty(iter19)) {
          iter19 = this.searchResultItems[iter19];
          iter19.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.metadata !== null && this.metadata !== undefined) {
      output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 4);
      this.metadata.write(output);
      output.writeFieldEnd();
    }
    if (this.lang !== null && this.lang !== undefined) {
      output.writeFieldBegin('lang', Thrift.Type.STRING, 5);
      output.writeString(this.lang);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
