//
// Autogenerated by Thrift Compiler (0.18.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');

const services_ttypes = require('./services_types');
const uuid_ttypes = require('./uuid_types');
const communication_ttypes = require('./communication_types');


const Service = require('./Service');
const ServiceClient = Service.Client;
const ServiceProcessor = Service.Processor;
const ttypes = require('./learn_types');
//HELPER FUNCTIONS AND STRUCTURES

const ActiveLearnerServerService_start_args = class {
  constructor(args) {
    this.sessionId = null;
    this.task = null;
    this.contact = null;
    if (args) {
      if (args.sessionId !== undefined && args.sessionId !== null) {
        this.sessionId = new uuid_ttypes.UUID(args.sessionId);
      }
      if (args.task !== undefined && args.task !== null) {
        this.task = new ttypes.AnnotationTask(args.task);
      }
      if (args.contact !== undefined && args.contact !== null) {
        this.contact = new services_ttypes.AsyncContactInfo(args.contact);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.sessionId = new uuid_ttypes.UUID();
          this.sessionId.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.task = new ttypes.AnnotationTask();
          this.task.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.contact = new services_ttypes.AsyncContactInfo();
          this.contact.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ActiveLearnerServerService_start_args');
    if (this.sessionId !== null && this.sessionId !== undefined) {
      output.writeFieldBegin('sessionId', Thrift.Type.STRUCT, 1);
      this.sessionId.write(output);
      output.writeFieldEnd();
    }
    if (this.task !== null && this.task !== undefined) {
      output.writeFieldBegin('task', Thrift.Type.STRUCT, 2);
      this.task.write(output);
      output.writeFieldEnd();
    }
    if (this.contact !== null && this.contact !== undefined) {
      output.writeFieldBegin('contact', Thrift.Type.STRUCT, 3);
      this.contact.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ActiveLearnerServerService_start_result = class {
  constructor(args) {
    this.success = null;
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ActiveLearnerServerService_start_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ActiveLearnerServerService_stop_args = class {
  constructor(args) {
    this.sessionId = null;
    if (args) {
      if (args.sessionId !== undefined && args.sessionId !== null) {
        this.sessionId = new uuid_ttypes.UUID(args.sessionId);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.sessionId = new uuid_ttypes.UUID();
          this.sessionId.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ActiveLearnerServerService_stop_args');
    if (this.sessionId !== null && this.sessionId !== undefined) {
      output.writeFieldBegin('sessionId', Thrift.Type.STRUCT, 1);
      this.sessionId.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ActiveLearnerServerService_stop_result = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ActiveLearnerServerService_stop_result');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ActiveLearnerServerService_addAnnotations_args = class {
  constructor(args) {
    this.sessionId = null;
    this.annotations = null;
    if (args) {
      if (args.sessionId !== undefined && args.sessionId !== null) {
        this.sessionId = new uuid_ttypes.UUID(args.sessionId);
      }
      if (args.annotations !== undefined && args.annotations !== null) {
        this.annotations = Thrift.copyList(args.annotations, [ttypes.Annotation]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.sessionId = new uuid_ttypes.UUID();
          this.sessionId.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.annotations = [];
          const _rtmp36 = input.readListBegin();
          const _size5 = _rtmp36.size || 0;
          for (let _i7 = 0; _i7 < _size5; ++_i7) {
            let elem8 = null;
            elem8 = new ttypes.Annotation();
            elem8.read(input);
            this.annotations.push(elem8);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ActiveLearnerServerService_addAnnotations_args');
    if (this.sessionId !== null && this.sessionId !== undefined) {
      output.writeFieldBegin('sessionId', Thrift.Type.STRUCT, 1);
      this.sessionId.write(output);
      output.writeFieldEnd();
    }
    if (this.annotations !== null && this.annotations !== undefined) {
      output.writeFieldBegin('annotations', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.annotations.length);
      for (let iter9 in this.annotations) {
        if (this.annotations.hasOwnProperty(iter9)) {
          iter9 = this.annotations[iter9];
          iter9.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ActiveLearnerServerService_addAnnotations_result = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ActiveLearnerServerService_addAnnotations_result');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ActiveLearnerServerServiceClient = exports.Client = class ActiveLearnerServerServiceClient extends ServiceClient {
  constructor(output, pClass) {
    super(output, pClass);
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
  }
  seqid () { return this._seqid; }
  new_seqid () { return this._seqid += 1; }

  start (sessionId, task, contact) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_start(sessionId, task, contact);
    });
  }

  send_start (sessionId, task, contact) {
    const output = new this.pClass(this.output);
    const params = {
      sessionId: sessionId,
      task: task,
      contact: contact
    };
    const args = new ActiveLearnerServerService_start_args(params);
    try {
      output.writeMessageBegin('start', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_start (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ActiveLearnerServerService_start_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('start failed: unknown result');
  }

  stop (sessionId) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_stop(sessionId);
    });
  }

  send_stop (sessionId) {
    const output = new this.pClass(this.output);
    const params = {
      sessionId: sessionId
    };
    const args = new ActiveLearnerServerService_stop_args(params);
    try {
      output.writeMessageBegin('stop', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_stop (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ActiveLearnerServerService_stop_result();
    result.read(input);
    input.readMessageEnd();

    callback(null);
  }

  addAnnotations (sessionId, annotations) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_addAnnotations(sessionId, annotations);
    });
  }

  send_addAnnotations (sessionId, annotations) {
    const output = new this.pClass(this.output);
    const params = {
      sessionId: sessionId,
      annotations: annotations
    };
    const args = new ActiveLearnerServerService_addAnnotations_args(params);
    try {
      output.writeMessageBegin('addAnnotations', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_addAnnotations (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new ActiveLearnerServerService_addAnnotations_result();
    result.read(input);
    input.readMessageEnd();

    callback(null);
  }
};
const ActiveLearnerServerServiceProcessor = exports.Processor = class ActiveLearnerServerServiceProcessor extends ServiceProcessor {
  constructor(handler) {
    super(handler);
    this._handler = handler;
  }
  process (input, output) {
    const r = input.readMessageBegin();
    if (this['process_' + r.fname]) {
      return this['process_' + r.fname].call(this, r.rseqid, input, output);
    } else {
      input.skip(Thrift.Type.STRUCT);
      input.readMessageEnd();
      const x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
      output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
      x.write(output);
      output.writeMessageEnd();
      output.flush();
    }
  }
  process_start (seqid, input, output) {
    const args = new ActiveLearnerServerService_start_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.start.length === 3) {
      new Promise((resolve) => resolve(this._handler.start.bind(this._handler)(
        args.sessionId,
        args.task,
        args.contact
      ))).then(result => {
        const result_obj = new ActiveLearnerServerService_start_result({success: result});
        output.writeMessageBegin("start", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("start", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.start(args.sessionId, args.task, args.contact, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined')) {
          result_obj = new ActiveLearnerServerService_start_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("start", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("start", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_stop (seqid, input, output) {
    const args = new ActiveLearnerServerService_stop_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.stop.length === 1) {
      new Promise((resolve) => resolve(this._handler.stop.bind(this._handler)(
        args.sessionId
      ))).then(result => {
        const result_obj = new ActiveLearnerServerService_stop_result({success: result});
        output.writeMessageBegin("stop", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("stop", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.stop(args.sessionId, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined')) {
          result_obj = new ActiveLearnerServerService_stop_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("stop", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("stop", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_addAnnotations (seqid, input, output) {
    const args = new ActiveLearnerServerService_addAnnotations_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.addAnnotations.length === 2) {
      new Promise((resolve) => resolve(this._handler.addAnnotations.bind(this._handler)(
        args.sessionId,
        args.annotations
      ))).then(result => {
        const result_obj = new ActiveLearnerServerService_addAnnotations_result({success: result});
        output.writeMessageBegin("addAnnotations", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addAnnotations", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.addAnnotations(args.sessionId, args.annotations, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined')) {
          result_obj = new ActiveLearnerServerService_addAnnotations_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("addAnnotations", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addAnnotations", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
};
