//
// Autogenerated by Thrift Compiler (0.18.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');

const context_ttypes = require('./context_types');
const metadata_ttypes = require('./metadata_types');
const language_ttypes = require('./language_types');
const structure_ttypes = require('./structure_types');
const entities_ttypes = require('./entities_types');
const situations_ttypes = require('./situations_types');
const ex_ttypes = require('./ex_types');
const email_ttypes = require('./email_types');
const twitter_ttypes = require('./twitter_types');
const audio_ttypes = require('./audio_types');
const communication_ttypes = require('./communication_types');
const services_ttypes = require('./services_types');


const ttypes = require('./annotate_types');
//HELPER FUNCTIONS AND STRUCTURES

const AnnotateCommunicationService_annotate_args = class {
  constructor(args) {
    this.original = null;
    if (args) {
      if (args.original !== undefined && args.original !== null) {
        this.original = new communication_ttypes.Communication(args.original);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.original = new communication_ttypes.Communication();
          this.original.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AnnotateCommunicationService_annotate_args');
    if (this.original !== null && this.original !== undefined) {
      output.writeFieldBegin('original', Thrift.Type.STRUCT, 1);
      this.original.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AnnotateCommunicationService_annotate_result = class {
  constructor(args) {
    this.success = null;
    this.ex = null;
    if (args instanceof ex_ttypes.ConcreteThriftException) {
        this.ex = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new communication_ttypes.Communication(args.success);
      }
      if (args.ex !== undefined && args.ex !== null) {
        this.ex = args.ex;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new communication_ttypes.Communication();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new ex_ttypes.ConcreteThriftException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AnnotateCommunicationService_annotate_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AnnotateCommunicationService_getMetadata_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AnnotateCommunicationService_getMetadata_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AnnotateCommunicationService_getMetadata_result = class {
  constructor(args) {
    this.success = null;
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new metadata_ttypes.AnnotationMetadata(args.success);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new metadata_ttypes.AnnotationMetadata();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AnnotateCommunicationService_getMetadata_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AnnotateCommunicationService_getDocumentation_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AnnotateCommunicationService_getDocumentation_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AnnotateCommunicationService_getDocumentation_result = class {
  constructor(args) {
    this.success = null;
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AnnotateCommunicationService_getDocumentation_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AnnotateCommunicationService_shutdown_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AnnotateCommunicationService_shutdown_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AnnotateCommunicationService_shutdown_result = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AnnotateCommunicationService_shutdown_result');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const AnnotateCommunicationServiceClient = exports.Client = class AnnotateCommunicationServiceClient {
  constructor(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
  }
  seqid () { return this._seqid; }
  new_seqid () { return this._seqid += 1; }

  annotate (original) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_annotate(original);
    });
  }

  send_annotate (original) {
    const output = new this.pClass(this.output);
    const params = {
      original: original
    };
    const args = new AnnotateCommunicationService_annotate_args(params);
    try {
      output.writeMessageBegin('annotate', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_annotate (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new AnnotateCommunicationService_annotate_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('annotate failed: unknown result');
  }

  getMetadata () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getMetadata();
    });
  }

  send_getMetadata () {
    const output = new this.pClass(this.output);
    const args = new AnnotateCommunicationService_getMetadata_args();
    try {
      output.writeMessageBegin('getMetadata', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getMetadata (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new AnnotateCommunicationService_getMetadata_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getMetadata failed: unknown result');
  }

  getDocumentation () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getDocumentation();
    });
  }

  send_getDocumentation () {
    const output = new this.pClass(this.output);
    const args = new AnnotateCommunicationService_getDocumentation_args();
    try {
      output.writeMessageBegin('getDocumentation', Thrift.MessageType.CALL, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }

  recv_getDocumentation (input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new AnnotateCommunicationService_getDocumentation_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getDocumentation failed: unknown result');
  }

  shutdown () {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_shutdown();
    });
  }

  send_shutdown () {
    const output = new this.pClass(this.output);
    const args = new AnnotateCommunicationService_shutdown_args();
    try {
      output.writeMessageBegin('shutdown', Thrift.MessageType.ONEWAY, this.seqid());
      args.write(output);
      output.writeMessageEnd();
      this.output.flush();
      const callback = this._reqs[this.seqid()] || function() {};
      delete this._reqs[this.seqid()];
      callback(null);
    }
    catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === 'function') {
        output.reset();
      }
      throw e;
    }
  }
};
const AnnotateCommunicationServiceProcessor = exports.Processor = class AnnotateCommunicationServiceProcessor {
  constructor(handler) {
    this._handler = handler;
  }
  process (input, output) {
    const r = input.readMessageBegin();
    if (this['process_' + r.fname]) {
      return this['process_' + r.fname].call(this, r.rseqid, input, output);
    } else {
      input.skip(Thrift.Type.STRUCT);
      input.readMessageEnd();
      const x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
      output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
      x.write(output);
      output.writeMessageEnd();
      output.flush();
    }
  }
  process_annotate (seqid, input, output) {
    const args = new AnnotateCommunicationService_annotate_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.annotate.length === 1) {
      new Promise((resolve) => resolve(this._handler.annotate.bind(this._handler)(
        args.original
      ))).then(result => {
        const result_obj = new AnnotateCommunicationService_annotate_result({success: result});
        output.writeMessageBegin("annotate", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        if (err instanceof ex_ttypes.ConcreteThriftException) {
          result = new AnnotateCommunicationService_annotate_result(err);
          output.writeMessageBegin("annotate", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("annotate", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.annotate(args.original, (err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined') || err instanceof ex_ttypes.ConcreteThriftException) {
          result_obj = new AnnotateCommunicationService_annotate_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("annotate", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("annotate", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getMetadata (seqid, input, output) {
    const args = new AnnotateCommunicationService_getMetadata_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getMetadata.length === 0) {
      new Promise((resolve) => resolve(this._handler.getMetadata.bind(this._handler)(
      ))).then(result => {
        const result_obj = new AnnotateCommunicationService_getMetadata_result({success: result});
        output.writeMessageBegin("getMetadata", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getMetadata", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getMetadata((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined')) {
          result_obj = new AnnotateCommunicationService_getMetadata_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getMetadata", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getMetadata", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getDocumentation (seqid, input, output) {
    const args = new AnnotateCommunicationService_getDocumentation_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getDocumentation.length === 0) {
      new Promise((resolve) => resolve(this._handler.getDocumentation.bind(this._handler)(
      ))).then(result => {
        const result_obj = new AnnotateCommunicationService_getDocumentation_result({success: result});
        output.writeMessageBegin("getDocumentation", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }).catch(err => {
        let result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDocumentation", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    } else {
      this._handler.getDocumentation((err, result) => {
        let result_obj;
        if ((err === null || typeof err === 'undefined')) {
          result_obj = new AnnotateCommunicationService_getDocumentation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
          output.writeMessageBegin("getDocumentation", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDocumentation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_shutdown (seqid, input, output) {
    const args = new AnnotateCommunicationService_shutdown_args();
    args.read(input);
    input.readMessageEnd();
    this._handler.shutdown();
  }
};
